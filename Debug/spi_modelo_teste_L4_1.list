
spi_modelo_teste_L4_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002538  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080026f4  080026f4  000036f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002734  08002734  00004010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002734  08002734  00004010  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002734  08002734  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002734  08002734  00003734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002738  08002738  00003738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20040000  0800273c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  20040010  0800274c  00004010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20040098  0800274c  00004098  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000082b6  00000000  00000000  00004040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001965  00000000  00000000  0000c2f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000878  00000000  00000000  0000dc60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000064d  00000000  00000000  0000e4d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000282e9  00000000  00000000  0000eb25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009f12  00000000  00000000  00036e0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4eee  00000000  00000000  00040d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00135c0e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002094  00000000  00000000  00135c54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00137ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20040010 	.word	0x20040010
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080026dc 	.word	0x080026dc

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20040014 	.word	0x20040014
 80001f8:	080026dc 	.word	0x080026dc

080001fc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b088      	sub	sp, #32
 8000200:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000202:	f107 030c 	add.w	r3, r7, #12
 8000206:	2200      	movs	r2, #0
 8000208:	601a      	str	r2, [r3, #0]
 800020a:	605a      	str	r2, [r3, #4]
 800020c:	609a      	str	r2, [r3, #8]
 800020e:	60da      	str	r2, [r3, #12]
 8000210:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000212:	4b18      	ldr	r3, [pc, #96]	@ (8000274 <MX_GPIO_Init+0x78>)
 8000214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000216:	4a17      	ldr	r2, [pc, #92]	@ (8000274 <MX_GPIO_Init+0x78>)
 8000218:	f043 0301 	orr.w	r3, r3, #1
 800021c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800021e:	4b15      	ldr	r3, [pc, #84]	@ (8000274 <MX_GPIO_Init+0x78>)
 8000220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000222:	f003 0301 	and.w	r3, r3, #1
 8000226:	60bb      	str	r3, [r7, #8]
 8000228:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800022a:	4b12      	ldr	r3, [pc, #72]	@ (8000274 <MX_GPIO_Init+0x78>)
 800022c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800022e:	4a11      	ldr	r2, [pc, #68]	@ (8000274 <MX_GPIO_Init+0x78>)
 8000230:	f043 0302 	orr.w	r3, r3, #2
 8000234:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000236:	4b0f      	ldr	r3, [pc, #60]	@ (8000274 <MX_GPIO_Init+0x78>)
 8000238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800023a:	f003 0302 	and.w	r3, r3, #2
 800023e:	607b      	str	r3, [r7, #4]
 8000240:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000242:	2200      	movs	r2, #0
 8000244:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000248:	480b      	ldr	r0, [pc, #44]	@ (8000278 <MX_GPIO_Init+0x7c>)
 800024a:	f000 fd3f 	bl	8000ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 800024e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000252:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000254:	2301      	movs	r3, #1
 8000256:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000258:	2300      	movs	r3, #0
 800025a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800025c:	2300      	movs	r3, #0
 800025e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000260:	f107 030c 	add.w	r3, r7, #12
 8000264:	4619      	mov	r1, r3
 8000266:	4804      	ldr	r0, [pc, #16]	@ (8000278 <MX_GPIO_Init+0x7c>)
 8000268:	f000 fb9e 	bl	80009a8 <HAL_GPIO_Init>

}
 800026c:	bf00      	nop
 800026e:	3720      	adds	r7, #32
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}
 8000274:	40021000 	.word	0x40021000
 8000278:	48000400 	.word	0x48000400

0800027c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b082      	sub	sp, #8
 8000280:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000282:	f000 f988 	bl	8000596 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000286:	f000 f81f 	bl	80002c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028a:	f7ff ffb7 	bl	80001fc <MX_GPIO_Init>
  MX_SPI1_Init();
 800028e:	f000 f867 	bl	8000360 <MX_SPI1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000292:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000296:	4808      	ldr	r0, [pc, #32]	@ (80002b8 <main+0x3c>)
 8000298:	f000 fd30 	bl	8000cfc <HAL_GPIO_TogglePin>
HAL_Delay(1000);
 800029c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002a0:	f000 f9ee 	bl	8000680 <HAL_Delay>
	  // 1. Recebe o sinal do mestre e envia a resposta
	  	      // HAL_SPI_TransmitReceive: função bloqueante
	  	      // O escravo espera o NSS ser ativado pelo mestre para iniciar a comunicação.
	  	      if (HAL_SPI_TransmitReceive(&hspi1, &tx_data, &rx_data, 1, HAL_MAX_DELAY) == HAL_OK) // função bloqueante
 80002a4:	f04f 33ff 	mov.w	r3, #4294967295
 80002a8:	9300      	str	r3, [sp, #0]
 80002aa:	2301      	movs	r3, #1
 80002ac:	4a03      	ldr	r2, [pc, #12]	@ (80002bc <main+0x40>)
 80002ae:	4904      	ldr	r1, [pc, #16]	@ (80002c0 <main+0x44>)
 80002b0:	4804      	ldr	r0, [pc, #16]	@ (80002c4 <main+0x48>)
 80002b2:	f001 fd44 	bl	8001d3e <HAL_SPI_TransmitReceive>
HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80002b6:	e7ec      	b.n	8000292 <main+0x16>
 80002b8:	48000400 	.word	0x48000400
 80002bc:	2004002c 	.word	0x2004002c
 80002c0:	20040000 	.word	0x20040000
 80002c4:	20040030 	.word	0x20040030

080002c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b096      	sub	sp, #88	@ 0x58
 80002cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ce:	f107 0314 	add.w	r3, r7, #20
 80002d2:	2244      	movs	r2, #68	@ 0x44
 80002d4:	2100      	movs	r1, #0
 80002d6:	4618      	mov	r0, r3
 80002d8:	f002 f9d4 	bl	8002684 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002dc:	463b      	mov	r3, r7
 80002de:	2200      	movs	r2, #0
 80002e0:	601a      	str	r2, [r3, #0]
 80002e2:	605a      	str	r2, [r3, #4]
 80002e4:	609a      	str	r2, [r3, #8]
 80002e6:	60da      	str	r2, [r3, #12]
 80002e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002ea:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80002ee:	f000 fd3f 	bl	8000d70 <HAL_PWREx_ControlVoltageScaling>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d001      	beq.n	80002fc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80002f8:	f000 f82c 	bl	8000354 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002fc:	2310      	movs	r3, #16
 80002fe:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000300:	2301      	movs	r3, #1
 8000302:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000304:	2300      	movs	r3, #0
 8000306:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000308:	2360      	movs	r3, #96	@ 0x60
 800030a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800030c:	2300      	movs	r3, #0
 800030e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000310:	f107 0314 	add.w	r3, r7, #20
 8000314:	4618      	mov	r0, r3
 8000316:	f000 fdcf 	bl	8000eb8 <HAL_RCC_OscConfig>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d001      	beq.n	8000324 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000320:	f000 f818 	bl	8000354 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000324:	230f      	movs	r3, #15
 8000326:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000328:	2300      	movs	r3, #0
 800032a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800032c:	2300      	movs	r3, #0
 800032e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000330:	2300      	movs	r3, #0
 8000332:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000334:	2300      	movs	r3, #0
 8000336:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000338:	463b      	mov	r3, r7
 800033a:	2100      	movs	r1, #0
 800033c:	4618      	mov	r0, r3
 800033e:	f001 f9d5 	bl	80016ec <HAL_RCC_ClockConfig>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d001      	beq.n	800034c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000348:	f000 f804 	bl	8000354 <Error_Handler>
  }
}
 800034c:	bf00      	nop
 800034e:	3758      	adds	r7, #88	@ 0x58
 8000350:	46bd      	mov	sp, r7
 8000352:	bd80      	pop	{r7, pc}

08000354 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000358:	b672      	cpsid	i
}
 800035a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800035c:	bf00      	nop
 800035e:	e7fd      	b.n	800035c <Error_Handler+0x8>

08000360 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000364:	4b18      	ldr	r3, [pc, #96]	@ (80003c8 <MX_SPI1_Init+0x68>)
 8000366:	4a19      	ldr	r2, [pc, #100]	@ (80003cc <MX_SPI1_Init+0x6c>)
 8000368:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800036a:	4b17      	ldr	r3, [pc, #92]	@ (80003c8 <MX_SPI1_Init+0x68>)
 800036c:	2200      	movs	r2, #0
 800036e:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000370:	4b15      	ldr	r3, [pc, #84]	@ (80003c8 <MX_SPI1_Init+0x68>)
 8000372:	2200      	movs	r2, #0
 8000374:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000376:	4b14      	ldr	r3, [pc, #80]	@ (80003c8 <MX_SPI1_Init+0x68>)
 8000378:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800037c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800037e:	4b12      	ldr	r3, [pc, #72]	@ (80003c8 <MX_SPI1_Init+0x68>)
 8000380:	2200      	movs	r2, #0
 8000382:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000384:	4b10      	ldr	r3, [pc, #64]	@ (80003c8 <MX_SPI1_Init+0x68>)
 8000386:	2200      	movs	r2, #0
 8000388:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 800038a:	4b0f      	ldr	r3, [pc, #60]	@ (80003c8 <MX_SPI1_Init+0x68>)
 800038c:	2200      	movs	r2, #0
 800038e:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000390:	4b0d      	ldr	r3, [pc, #52]	@ (80003c8 <MX_SPI1_Init+0x68>)
 8000392:	2200      	movs	r2, #0
 8000394:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000396:	4b0c      	ldr	r3, [pc, #48]	@ (80003c8 <MX_SPI1_Init+0x68>)
 8000398:	2200      	movs	r2, #0
 800039a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800039c:	4b0a      	ldr	r3, [pc, #40]	@ (80003c8 <MX_SPI1_Init+0x68>)
 800039e:	2200      	movs	r2, #0
 80003a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80003a2:	4b09      	ldr	r3, [pc, #36]	@ (80003c8 <MX_SPI1_Init+0x68>)
 80003a4:	2207      	movs	r2, #7
 80003a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003a8:	4b07      	ldr	r3, [pc, #28]	@ (80003c8 <MX_SPI1_Init+0x68>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80003ae:	4b06      	ldr	r3, [pc, #24]	@ (80003c8 <MX_SPI1_Init+0x68>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003b4:	4804      	ldr	r0, [pc, #16]	@ (80003c8 <MX_SPI1_Init+0x68>)
 80003b6:	f001 fc1f 	bl	8001bf8 <HAL_SPI_Init>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d001      	beq.n	80003c4 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 80003c0:	f7ff ffc8 	bl	8000354 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003c4:	bf00      	nop
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	20040030 	.word	0x20040030
 80003cc:	40013000 	.word	0x40013000

080003d0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b08a      	sub	sp, #40	@ 0x28
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d8:	f107 0314 	add.w	r3, r7, #20
 80003dc:	2200      	movs	r2, #0
 80003de:	601a      	str	r2, [r3, #0]
 80003e0:	605a      	str	r2, [r3, #4]
 80003e2:	609a      	str	r2, [r3, #8]
 80003e4:	60da      	str	r2, [r3, #12]
 80003e6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	4a1b      	ldr	r2, [pc, #108]	@ (800045c <HAL_SPI_MspInit+0x8c>)
 80003ee:	4293      	cmp	r3, r2
 80003f0:	d130      	bne.n	8000454 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80003f2:	4b1b      	ldr	r3, [pc, #108]	@ (8000460 <HAL_SPI_MspInit+0x90>)
 80003f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80003f6:	4a1a      	ldr	r2, [pc, #104]	@ (8000460 <HAL_SPI_MspInit+0x90>)
 80003f8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80003fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80003fe:	4b18      	ldr	r3, [pc, #96]	@ (8000460 <HAL_SPI_MspInit+0x90>)
 8000400:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000402:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000406:	613b      	str	r3, [r7, #16]
 8000408:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800040a:	4b15      	ldr	r3, [pc, #84]	@ (8000460 <HAL_SPI_MspInit+0x90>)
 800040c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800040e:	4a14      	ldr	r2, [pc, #80]	@ (8000460 <HAL_SPI_MspInit+0x90>)
 8000410:	f043 0301 	orr.w	r3, r3, #1
 8000414:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000416:	4b12      	ldr	r3, [pc, #72]	@ (8000460 <HAL_SPI_MspInit+0x90>)
 8000418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800041a:	f003 0301 	and.w	r3, r3, #1
 800041e:	60fb      	str	r3, [r7, #12]
 8000420:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000422:	23f0      	movs	r3, #240	@ 0xf0
 8000424:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000426:	2302      	movs	r3, #2
 8000428:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042a:	2300      	movs	r3, #0
 800042c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800042e:	2303      	movs	r3, #3
 8000430:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000432:	2305      	movs	r3, #5
 8000434:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000436:	f107 0314 	add.w	r3, r7, #20
 800043a:	4619      	mov	r1, r3
 800043c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000440:	f000 fab2 	bl	80009a8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000444:	2200      	movs	r2, #0
 8000446:	2100      	movs	r1, #0
 8000448:	2023      	movs	r0, #35	@ 0x23
 800044a:	f000 fa18 	bl	800087e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800044e:	2023      	movs	r0, #35	@ 0x23
 8000450:	f000 fa31 	bl	80008b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000454:	bf00      	nop
 8000456:	3728      	adds	r7, #40	@ 0x28
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}
 800045c:	40013000 	.word	0x40013000
 8000460:	40021000 	.word	0x40021000

08000464 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000464:	b480      	push	{r7}
 8000466:	b083      	sub	sp, #12
 8000468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800046a:	4b0f      	ldr	r3, [pc, #60]	@ (80004a8 <HAL_MspInit+0x44>)
 800046c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800046e:	4a0e      	ldr	r2, [pc, #56]	@ (80004a8 <HAL_MspInit+0x44>)
 8000470:	f043 0301 	orr.w	r3, r3, #1
 8000474:	6613      	str	r3, [r2, #96]	@ 0x60
 8000476:	4b0c      	ldr	r3, [pc, #48]	@ (80004a8 <HAL_MspInit+0x44>)
 8000478:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800047a:	f003 0301 	and.w	r3, r3, #1
 800047e:	607b      	str	r3, [r7, #4]
 8000480:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000482:	4b09      	ldr	r3, [pc, #36]	@ (80004a8 <HAL_MspInit+0x44>)
 8000484:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000486:	4a08      	ldr	r2, [pc, #32]	@ (80004a8 <HAL_MspInit+0x44>)
 8000488:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800048c:	6593      	str	r3, [r2, #88]	@ 0x58
 800048e:	4b06      	ldr	r3, [pc, #24]	@ (80004a8 <HAL_MspInit+0x44>)
 8000490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000492:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000496:	603b      	str	r3, [r7, #0]
 8000498:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800049a:	bf00      	nop
 800049c:	370c      	adds	r7, #12
 800049e:	46bd      	mov	sp, r7
 80004a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop
 80004a8:	40021000 	.word	0x40021000

080004ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004b0:	bf00      	nop
 80004b2:	e7fd      	b.n	80004b0 <NMI_Handler+0x4>

080004b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004b8:	bf00      	nop
 80004ba:	e7fd      	b.n	80004b8 <HardFault_Handler+0x4>

080004bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004c0:	bf00      	nop
 80004c2:	e7fd      	b.n	80004c0 <MemManage_Handler+0x4>

080004c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004c8:	bf00      	nop
 80004ca:	e7fd      	b.n	80004c8 <BusFault_Handler+0x4>

080004cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004d0:	bf00      	nop
 80004d2:	e7fd      	b.n	80004d0 <UsageFault_Handler+0x4>

080004d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004d8:	bf00      	nop
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr

080004e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004e2:	b480      	push	{r7}
 80004e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004e6:	bf00      	nop
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr

080004f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004f4:	bf00      	nop
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr

080004fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004fe:	b580      	push	{r7, lr}
 8000500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000502:	f000 f89d 	bl	8000640 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000506:	bf00      	nop
 8000508:	bd80      	pop	{r7, pc}
	...

0800050c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000510:	4802      	ldr	r0, [pc, #8]	@ (800051c <SPI1_IRQHandler+0x10>)
 8000512:	f001 fe33 	bl	800217c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000516:	bf00      	nop
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	20040030 	.word	0x20040030

08000520 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000524:	4b06      	ldr	r3, [pc, #24]	@ (8000540 <SystemInit+0x20>)
 8000526:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800052a:	4a05      	ldr	r2, [pc, #20]	@ (8000540 <SystemInit+0x20>)
 800052c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000530:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000534:	bf00      	nop
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	e000ed00 	.word	0xe000ed00

08000544 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000544:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800057c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000548:	f7ff ffea 	bl	8000520 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800054c:	480c      	ldr	r0, [pc, #48]	@ (8000580 <LoopForever+0x6>)
  ldr r1, =_edata
 800054e:	490d      	ldr	r1, [pc, #52]	@ (8000584 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000550:	4a0d      	ldr	r2, [pc, #52]	@ (8000588 <LoopForever+0xe>)
  movs r3, #0
 8000552:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000554:	e002      	b.n	800055c <LoopCopyDataInit>

08000556 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000556:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000558:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800055a:	3304      	adds	r3, #4

0800055c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800055c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800055e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000560:	d3f9      	bcc.n	8000556 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000562:	4a0a      	ldr	r2, [pc, #40]	@ (800058c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000564:	4c0a      	ldr	r4, [pc, #40]	@ (8000590 <LoopForever+0x16>)
  movs r3, #0
 8000566:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000568:	e001      	b.n	800056e <LoopFillZerobss>

0800056a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800056a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800056c:	3204      	adds	r2, #4

0800056e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800056e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000570:	d3fb      	bcc.n	800056a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000572:	f002 f88f 	bl	8002694 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000576:	f7ff fe81 	bl	800027c <main>

0800057a <LoopForever>:

LoopForever:
    b LoopForever
 800057a:	e7fe      	b.n	800057a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800057c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000580:	20040000 	.word	0x20040000
  ldr r1, =_edata
 8000584:	20040010 	.word	0x20040010
  ldr r2, =_sidata
 8000588:	0800273c 	.word	0x0800273c
  ldr r2, =_sbss
 800058c:	20040010 	.word	0x20040010
  ldr r4, =_ebss
 8000590:	20040098 	.word	0x20040098

08000594 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000594:	e7fe      	b.n	8000594 <ADC1_IRQHandler>

08000596 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000596:	b580      	push	{r7, lr}
 8000598:	b082      	sub	sp, #8
 800059a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800059c:	2300      	movs	r3, #0
 800059e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005a0:	2003      	movs	r0, #3
 80005a2:	f000 f961 	bl	8000868 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005a6:	200f      	movs	r0, #15
 80005a8:	f000 f80e 	bl	80005c8 <HAL_InitTick>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d002      	beq.n	80005b8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80005b2:	2301      	movs	r3, #1
 80005b4:	71fb      	strb	r3, [r7, #7]
 80005b6:	e001      	b.n	80005bc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005b8:	f7ff ff54 	bl	8000464 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005bc:	79fb      	ldrb	r3, [r7, #7]
}
 80005be:	4618      	mov	r0, r3
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
	...

080005c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80005d0:	2300      	movs	r3, #0
 80005d2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80005d4:	4b17      	ldr	r3, [pc, #92]	@ (8000634 <HAL_InitTick+0x6c>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d023      	beq.n	8000624 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80005dc:	4b16      	ldr	r3, [pc, #88]	@ (8000638 <HAL_InitTick+0x70>)
 80005de:	681a      	ldr	r2, [r3, #0]
 80005e0:	4b14      	ldr	r3, [pc, #80]	@ (8000634 <HAL_InitTick+0x6c>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	4619      	mov	r1, r3
 80005e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80005ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80005f2:	4618      	mov	r0, r3
 80005f4:	f000 f96d 	bl	80008d2 <HAL_SYSTICK_Config>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d10f      	bne.n	800061e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	2b0f      	cmp	r3, #15
 8000602:	d809      	bhi.n	8000618 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000604:	2200      	movs	r2, #0
 8000606:	6879      	ldr	r1, [r7, #4]
 8000608:	f04f 30ff 	mov.w	r0, #4294967295
 800060c:	f000 f937 	bl	800087e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000610:	4a0a      	ldr	r2, [pc, #40]	@ (800063c <HAL_InitTick+0x74>)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	6013      	str	r3, [r2, #0]
 8000616:	e007      	b.n	8000628 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000618:	2301      	movs	r3, #1
 800061a:	73fb      	strb	r3, [r7, #15]
 800061c:	e004      	b.n	8000628 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800061e:	2301      	movs	r3, #1
 8000620:	73fb      	strb	r3, [r7, #15]
 8000622:	e001      	b.n	8000628 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000624:	2301      	movs	r3, #1
 8000626:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000628:	7bfb      	ldrb	r3, [r7, #15]
}
 800062a:	4618      	mov	r0, r3
 800062c:	3710      	adds	r7, #16
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	2004000c 	.word	0x2004000c
 8000638:	20040004 	.word	0x20040004
 800063c:	20040008 	.word	0x20040008

08000640 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000644:	4b06      	ldr	r3, [pc, #24]	@ (8000660 <HAL_IncTick+0x20>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	461a      	mov	r2, r3
 800064a:	4b06      	ldr	r3, [pc, #24]	@ (8000664 <HAL_IncTick+0x24>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4413      	add	r3, r2
 8000650:	4a04      	ldr	r2, [pc, #16]	@ (8000664 <HAL_IncTick+0x24>)
 8000652:	6013      	str	r3, [r2, #0]
}
 8000654:	bf00      	nop
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	2004000c 	.word	0x2004000c
 8000664:	20040094 	.word	0x20040094

08000668 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  return uwTick;
 800066c:	4b03      	ldr	r3, [pc, #12]	@ (800067c <HAL_GetTick+0x14>)
 800066e:	681b      	ldr	r3, [r3, #0]
}
 8000670:	4618      	mov	r0, r3
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	20040094 	.word	0x20040094

08000680 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000688:	f7ff ffee 	bl	8000668 <HAL_GetTick>
 800068c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000698:	d005      	beq.n	80006a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800069a:	4b0a      	ldr	r3, [pc, #40]	@ (80006c4 <HAL_Delay+0x44>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	461a      	mov	r2, r3
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	4413      	add	r3, r2
 80006a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006a6:	bf00      	nop
 80006a8:	f7ff ffde 	bl	8000668 <HAL_GetTick>
 80006ac:	4602      	mov	r2, r0
 80006ae:	68bb      	ldr	r3, [r7, #8]
 80006b0:	1ad3      	subs	r3, r2, r3
 80006b2:	68fa      	ldr	r2, [r7, #12]
 80006b4:	429a      	cmp	r2, r3
 80006b6:	d8f7      	bhi.n	80006a8 <HAL_Delay+0x28>
  {
  }
}
 80006b8:	bf00      	nop
 80006ba:	bf00      	nop
 80006bc:	3710      	adds	r7, #16
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	2004000c 	.word	0x2004000c

080006c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b085      	sub	sp, #20
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	f003 0307 	and.w	r3, r3, #7
 80006d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006d8:	4b0c      	ldr	r3, [pc, #48]	@ (800070c <__NVIC_SetPriorityGrouping+0x44>)
 80006da:	68db      	ldr	r3, [r3, #12]
 80006dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006de:	68ba      	ldr	r2, [r7, #8]
 80006e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80006e4:	4013      	ands	r3, r2
 80006e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80006f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006fa:	4a04      	ldr	r2, [pc, #16]	@ (800070c <__NVIC_SetPriorityGrouping+0x44>)
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	60d3      	str	r3, [r2, #12]
}
 8000700:	bf00      	nop
 8000702:	3714      	adds	r7, #20
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr
 800070c:	e000ed00 	.word	0xe000ed00

08000710 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000714:	4b04      	ldr	r3, [pc, #16]	@ (8000728 <__NVIC_GetPriorityGrouping+0x18>)
 8000716:	68db      	ldr	r3, [r3, #12]
 8000718:	0a1b      	lsrs	r3, r3, #8
 800071a:	f003 0307 	and.w	r3, r3, #7
}
 800071e:	4618      	mov	r0, r3
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr
 8000728:	e000ed00 	.word	0xe000ed00

0800072c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800073a:	2b00      	cmp	r3, #0
 800073c:	db0b      	blt.n	8000756 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	f003 021f 	and.w	r2, r3, #31
 8000744:	4907      	ldr	r1, [pc, #28]	@ (8000764 <__NVIC_EnableIRQ+0x38>)
 8000746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074a:	095b      	lsrs	r3, r3, #5
 800074c:	2001      	movs	r0, #1
 800074e:	fa00 f202 	lsl.w	r2, r0, r2
 8000752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000756:	bf00      	nop
 8000758:	370c      	adds	r7, #12
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	e000e100 	.word	0xe000e100

08000768 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	6039      	str	r1, [r7, #0]
 8000772:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000778:	2b00      	cmp	r3, #0
 800077a:	db0a      	blt.n	8000792 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	b2da      	uxtb	r2, r3
 8000780:	490c      	ldr	r1, [pc, #48]	@ (80007b4 <__NVIC_SetPriority+0x4c>)
 8000782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000786:	0112      	lsls	r2, r2, #4
 8000788:	b2d2      	uxtb	r2, r2
 800078a:	440b      	add	r3, r1
 800078c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000790:	e00a      	b.n	80007a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	b2da      	uxtb	r2, r3
 8000796:	4908      	ldr	r1, [pc, #32]	@ (80007b8 <__NVIC_SetPriority+0x50>)
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	f003 030f 	and.w	r3, r3, #15
 800079e:	3b04      	subs	r3, #4
 80007a0:	0112      	lsls	r2, r2, #4
 80007a2:	b2d2      	uxtb	r2, r2
 80007a4:	440b      	add	r3, r1
 80007a6:	761a      	strb	r2, [r3, #24]
}
 80007a8:	bf00      	nop
 80007aa:	370c      	adds	r7, #12
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	e000e100 	.word	0xe000e100
 80007b8:	e000ed00 	.word	0xe000ed00

080007bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007bc:	b480      	push	{r7}
 80007be:	b089      	sub	sp, #36	@ 0x24
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	60f8      	str	r0, [r7, #12]
 80007c4:	60b9      	str	r1, [r7, #8]
 80007c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	f003 0307 	and.w	r3, r3, #7
 80007ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007d0:	69fb      	ldr	r3, [r7, #28]
 80007d2:	f1c3 0307 	rsb	r3, r3, #7
 80007d6:	2b04      	cmp	r3, #4
 80007d8:	bf28      	it	cs
 80007da:	2304      	movcs	r3, #4
 80007dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	3304      	adds	r3, #4
 80007e2:	2b06      	cmp	r3, #6
 80007e4:	d902      	bls.n	80007ec <NVIC_EncodePriority+0x30>
 80007e6:	69fb      	ldr	r3, [r7, #28]
 80007e8:	3b03      	subs	r3, #3
 80007ea:	e000      	b.n	80007ee <NVIC_EncodePriority+0x32>
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f0:	f04f 32ff 	mov.w	r2, #4294967295
 80007f4:	69bb      	ldr	r3, [r7, #24]
 80007f6:	fa02 f303 	lsl.w	r3, r2, r3
 80007fa:	43da      	mvns	r2, r3
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	401a      	ands	r2, r3
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000804:	f04f 31ff 	mov.w	r1, #4294967295
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	fa01 f303 	lsl.w	r3, r1, r3
 800080e:	43d9      	mvns	r1, r3
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000814:	4313      	orrs	r3, r2
         );
}
 8000816:	4618      	mov	r0, r3
 8000818:	3724      	adds	r7, #36	@ 0x24
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
	...

08000824 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	3b01      	subs	r3, #1
 8000830:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000834:	d301      	bcc.n	800083a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000836:	2301      	movs	r3, #1
 8000838:	e00f      	b.n	800085a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800083a:	4a0a      	ldr	r2, [pc, #40]	@ (8000864 <SysTick_Config+0x40>)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	3b01      	subs	r3, #1
 8000840:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000842:	210f      	movs	r1, #15
 8000844:	f04f 30ff 	mov.w	r0, #4294967295
 8000848:	f7ff ff8e 	bl	8000768 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800084c:	4b05      	ldr	r3, [pc, #20]	@ (8000864 <SysTick_Config+0x40>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000852:	4b04      	ldr	r3, [pc, #16]	@ (8000864 <SysTick_Config+0x40>)
 8000854:	2207      	movs	r2, #7
 8000856:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000858:	2300      	movs	r3, #0
}
 800085a:	4618      	mov	r0, r3
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	e000e010 	.word	0xe000e010

08000868 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000870:	6878      	ldr	r0, [r7, #4]
 8000872:	f7ff ff29 	bl	80006c8 <__NVIC_SetPriorityGrouping>
}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800087e:	b580      	push	{r7, lr}
 8000880:	b086      	sub	sp, #24
 8000882:	af00      	add	r7, sp, #0
 8000884:	4603      	mov	r3, r0
 8000886:	60b9      	str	r1, [r7, #8]
 8000888:	607a      	str	r2, [r7, #4]
 800088a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800088c:	2300      	movs	r3, #0
 800088e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000890:	f7ff ff3e 	bl	8000710 <__NVIC_GetPriorityGrouping>
 8000894:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000896:	687a      	ldr	r2, [r7, #4]
 8000898:	68b9      	ldr	r1, [r7, #8]
 800089a:	6978      	ldr	r0, [r7, #20]
 800089c:	f7ff ff8e 	bl	80007bc <NVIC_EncodePriority>
 80008a0:	4602      	mov	r2, r0
 80008a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008a6:	4611      	mov	r1, r2
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff ff5d 	bl	8000768 <__NVIC_SetPriority>
}
 80008ae:	bf00      	nop
 80008b0:	3718      	adds	r7, #24
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008b6:	b580      	push	{r7, lr}
 80008b8:	b082      	sub	sp, #8
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	4603      	mov	r3, r0
 80008be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff ff31 	bl	800072c <__NVIC_EnableIRQ>
}
 80008ca:	bf00      	nop
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	b082      	sub	sp, #8
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008da:	6878      	ldr	r0, [r7, #4]
 80008dc:	f7ff ffa2 	bl	8000824 <SysTick_Config>
 80008e0:	4603      	mov	r3, r0
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b084      	sub	sp, #16
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80008f2:	2300      	movs	r3, #0
 80008f4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	2b02      	cmp	r3, #2
 8000900:	d005      	beq.n	800090e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2204      	movs	r2, #4
 8000906:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000908:	2301      	movs	r3, #1
 800090a:	73fb      	strb	r3, [r7, #15]
 800090c:	e047      	b.n	800099e <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f022 020e 	bic.w	r2, r2, #14
 800091c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f022 0201 	bic.w	r2, r2, #1
 800092c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000932:	681a      	ldr	r2, [r3, #0]
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000938:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800093c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000942:	f003 021c 	and.w	r2, r3, #28
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800094a:	2101      	movs	r1, #1
 800094c:	fa01 f202 	lsl.w	r2, r1, r2
 8000950:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000956:	687a      	ldr	r2, [r7, #4]
 8000958:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800095a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000960:	2b00      	cmp	r3, #0
 8000962:	d00c      	beq.n	800097e <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800096e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000972:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000978:	687a      	ldr	r2, [r7, #4]
 800097a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800097c:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	2201      	movs	r2, #1
 8000982:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2200      	movs	r2, #0
 800098a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000992:	2b00      	cmp	r3, #0
 8000994:	d003      	beq.n	800099e <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800099a:	6878      	ldr	r0, [r7, #4]
 800099c:	4798      	blx	r3
    }
  }
  return status;
 800099e:	7bfb      	ldrb	r3, [r7, #15]
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	3710      	adds	r7, #16
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b087      	sub	sp, #28
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
 80009b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009b2:	2300      	movs	r3, #0
 80009b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009b6:	e166      	b.n	8000c86 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	2101      	movs	r1, #1
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	fa01 f303 	lsl.w	r3, r1, r3
 80009c4:	4013      	ands	r3, r2
 80009c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	f000 8158 	beq.w	8000c80 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	f003 0303 	and.w	r3, r3, #3
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d005      	beq.n	80009e8 <HAL_GPIO_Init+0x40>
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	f003 0303 	and.w	r3, r3, #3
 80009e4:	2b02      	cmp	r3, #2
 80009e6:	d130      	bne.n	8000a4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	689b      	ldr	r3, [r3, #8]
 80009ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	005b      	lsls	r3, r3, #1
 80009f2:	2203      	movs	r2, #3
 80009f4:	fa02 f303 	lsl.w	r3, r2, r3
 80009f8:	43db      	mvns	r3, r3
 80009fa:	693a      	ldr	r2, [r7, #16]
 80009fc:	4013      	ands	r3, r2
 80009fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	68da      	ldr	r2, [r3, #12]
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	005b      	lsls	r3, r3, #1
 8000a08:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0c:	693a      	ldr	r2, [r7, #16]
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	693a      	ldr	r2, [r7, #16]
 8000a16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a1e:	2201      	movs	r2, #1
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	fa02 f303 	lsl.w	r3, r2, r3
 8000a26:	43db      	mvns	r3, r3
 8000a28:	693a      	ldr	r2, [r7, #16]
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	091b      	lsrs	r3, r3, #4
 8000a34:	f003 0201 	and.w	r2, r3, #1
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	f003 0303 	and.w	r3, r3, #3
 8000a52:	2b03      	cmp	r3, #3
 8000a54:	d017      	beq.n	8000a86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	68db      	ldr	r3, [r3, #12]
 8000a5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	2203      	movs	r2, #3
 8000a62:	fa02 f303 	lsl.w	r3, r2, r3
 8000a66:	43db      	mvns	r3, r3
 8000a68:	693a      	ldr	r2, [r7, #16]
 8000a6a:	4013      	ands	r3, r2
 8000a6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	689a      	ldr	r2, [r3, #8]
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7a:	693a      	ldr	r2, [r7, #16]
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	693a      	ldr	r2, [r7, #16]
 8000a84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	f003 0303 	and.w	r3, r3, #3
 8000a8e:	2b02      	cmp	r3, #2
 8000a90:	d123      	bne.n	8000ada <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	08da      	lsrs	r2, r3, #3
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	3208      	adds	r2, #8
 8000a9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	f003 0307 	and.w	r3, r3, #7
 8000aa6:	009b      	lsls	r3, r3, #2
 8000aa8:	220f      	movs	r2, #15
 8000aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000aae:	43db      	mvns	r3, r3
 8000ab0:	693a      	ldr	r2, [r7, #16]
 8000ab2:	4013      	ands	r3, r2
 8000ab4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	691a      	ldr	r2, [r3, #16]
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	f003 0307 	and.w	r3, r3, #7
 8000ac0:	009b      	lsls	r3, r3, #2
 8000ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	08da      	lsrs	r2, r3, #3
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	3208      	adds	r2, #8
 8000ad4:	6939      	ldr	r1, [r7, #16]
 8000ad6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	005b      	lsls	r3, r3, #1
 8000ae4:	2203      	movs	r2, #3
 8000ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aea:	43db      	mvns	r3, r3
 8000aec:	693a      	ldr	r2, [r7, #16]
 8000aee:	4013      	ands	r3, r2
 8000af0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	f003 0203 	and.w	r2, r3, #3
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	005b      	lsls	r3, r3, #1
 8000afe:	fa02 f303 	lsl.w	r3, r2, r3
 8000b02:	693a      	ldr	r2, [r7, #16]
 8000b04:	4313      	orrs	r3, r2
 8000b06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	f000 80b2 	beq.w	8000c80 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b1c:	4b61      	ldr	r3, [pc, #388]	@ (8000ca4 <HAL_GPIO_Init+0x2fc>)
 8000b1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b20:	4a60      	ldr	r2, [pc, #384]	@ (8000ca4 <HAL_GPIO_Init+0x2fc>)
 8000b22:	f043 0301 	orr.w	r3, r3, #1
 8000b26:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b28:	4b5e      	ldr	r3, [pc, #376]	@ (8000ca4 <HAL_GPIO_Init+0x2fc>)
 8000b2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b2c:	f003 0301 	and.w	r3, r3, #1
 8000b30:	60bb      	str	r3, [r7, #8]
 8000b32:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b34:	4a5c      	ldr	r2, [pc, #368]	@ (8000ca8 <HAL_GPIO_Init+0x300>)
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	089b      	lsrs	r3, r3, #2
 8000b3a:	3302      	adds	r3, #2
 8000b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	f003 0303 	and.w	r3, r3, #3
 8000b48:	009b      	lsls	r3, r3, #2
 8000b4a:	220f      	movs	r2, #15
 8000b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b50:	43db      	mvns	r3, r3
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	4013      	ands	r3, r2
 8000b56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000b5e:	d02b      	beq.n	8000bb8 <HAL_GPIO_Init+0x210>
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	4a52      	ldr	r2, [pc, #328]	@ (8000cac <HAL_GPIO_Init+0x304>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d025      	beq.n	8000bb4 <HAL_GPIO_Init+0x20c>
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	4a51      	ldr	r2, [pc, #324]	@ (8000cb0 <HAL_GPIO_Init+0x308>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d01f      	beq.n	8000bb0 <HAL_GPIO_Init+0x208>
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	4a50      	ldr	r2, [pc, #320]	@ (8000cb4 <HAL_GPIO_Init+0x30c>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d019      	beq.n	8000bac <HAL_GPIO_Init+0x204>
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	4a4f      	ldr	r2, [pc, #316]	@ (8000cb8 <HAL_GPIO_Init+0x310>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d013      	beq.n	8000ba8 <HAL_GPIO_Init+0x200>
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	4a4e      	ldr	r2, [pc, #312]	@ (8000cbc <HAL_GPIO_Init+0x314>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d00d      	beq.n	8000ba4 <HAL_GPIO_Init+0x1fc>
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	4a4d      	ldr	r2, [pc, #308]	@ (8000cc0 <HAL_GPIO_Init+0x318>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d007      	beq.n	8000ba0 <HAL_GPIO_Init+0x1f8>
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	4a4c      	ldr	r2, [pc, #304]	@ (8000cc4 <HAL_GPIO_Init+0x31c>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d101      	bne.n	8000b9c <HAL_GPIO_Init+0x1f4>
 8000b98:	2307      	movs	r3, #7
 8000b9a:	e00e      	b.n	8000bba <HAL_GPIO_Init+0x212>
 8000b9c:	2308      	movs	r3, #8
 8000b9e:	e00c      	b.n	8000bba <HAL_GPIO_Init+0x212>
 8000ba0:	2306      	movs	r3, #6
 8000ba2:	e00a      	b.n	8000bba <HAL_GPIO_Init+0x212>
 8000ba4:	2305      	movs	r3, #5
 8000ba6:	e008      	b.n	8000bba <HAL_GPIO_Init+0x212>
 8000ba8:	2304      	movs	r3, #4
 8000baa:	e006      	b.n	8000bba <HAL_GPIO_Init+0x212>
 8000bac:	2303      	movs	r3, #3
 8000bae:	e004      	b.n	8000bba <HAL_GPIO_Init+0x212>
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	e002      	b.n	8000bba <HAL_GPIO_Init+0x212>
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	e000      	b.n	8000bba <HAL_GPIO_Init+0x212>
 8000bb8:	2300      	movs	r3, #0
 8000bba:	697a      	ldr	r2, [r7, #20]
 8000bbc:	f002 0203 	and.w	r2, r2, #3
 8000bc0:	0092      	lsls	r2, r2, #2
 8000bc2:	4093      	lsls	r3, r2
 8000bc4:	693a      	ldr	r2, [r7, #16]
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000bca:	4937      	ldr	r1, [pc, #220]	@ (8000ca8 <HAL_GPIO_Init+0x300>)
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	089b      	lsrs	r3, r3, #2
 8000bd0:	3302      	adds	r3, #2
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000bd8:	4b3b      	ldr	r3, [pc, #236]	@ (8000cc8 <HAL_GPIO_Init+0x320>)
 8000bda:	689b      	ldr	r3, [r3, #8]
 8000bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	43db      	mvns	r3, r3
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	4013      	ands	r3, r2
 8000be6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d003      	beq.n	8000bfc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000bf4:	693a      	ldr	r2, [r7, #16]
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000bfc:	4a32      	ldr	r2, [pc, #200]	@ (8000cc8 <HAL_GPIO_Init+0x320>)
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000c02:	4b31      	ldr	r3, [pc, #196]	@ (8000cc8 <HAL_GPIO_Init+0x320>)
 8000c04:	68db      	ldr	r3, [r3, #12]
 8000c06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	43db      	mvns	r3, r3
 8000c0c:	693a      	ldr	r2, [r7, #16]
 8000c0e:	4013      	ands	r3, r2
 8000c10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d003      	beq.n	8000c26 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	4313      	orrs	r3, r2
 8000c24:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c26:	4a28      	ldr	r2, [pc, #160]	@ (8000cc8 <HAL_GPIO_Init+0x320>)
 8000c28:	693b      	ldr	r3, [r7, #16]
 8000c2a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000c2c:	4b26      	ldr	r3, [pc, #152]	@ (8000cc8 <HAL_GPIO_Init+0x320>)
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	43db      	mvns	r3, r3
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	4013      	ands	r3, r2
 8000c3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d003      	beq.n	8000c50 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000c48:	693a      	ldr	r2, [r7, #16]
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000c50:	4a1d      	ldr	r2, [pc, #116]	@ (8000cc8 <HAL_GPIO_Init+0x320>)
 8000c52:	693b      	ldr	r3, [r7, #16]
 8000c54:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000c56:	4b1c      	ldr	r3, [pc, #112]	@ (8000cc8 <HAL_GPIO_Init+0x320>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	43db      	mvns	r3, r3
 8000c60:	693a      	ldr	r2, [r7, #16]
 8000c62:	4013      	ands	r3, r2
 8000c64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d003      	beq.n	8000c7a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	4313      	orrs	r3, r2
 8000c78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000c7a:	4a13      	ldr	r2, [pc, #76]	@ (8000cc8 <HAL_GPIO_Init+0x320>)
 8000c7c:	693b      	ldr	r3, [r7, #16]
 8000c7e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	3301      	adds	r3, #1
 8000c84:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	f47f ae91 	bne.w	80009b8 <HAL_GPIO_Init+0x10>
  }
}
 8000c96:	bf00      	nop
 8000c98:	bf00      	nop
 8000c9a:	371c      	adds	r7, #28
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	40021000 	.word	0x40021000
 8000ca8:	40010000 	.word	0x40010000
 8000cac:	48000400 	.word	0x48000400
 8000cb0:	48000800 	.word	0x48000800
 8000cb4:	48000c00 	.word	0x48000c00
 8000cb8:	48001000 	.word	0x48001000
 8000cbc:	48001400 	.word	0x48001400
 8000cc0:	48001800 	.word	0x48001800
 8000cc4:	48001c00 	.word	0x48001c00
 8000cc8:	40010400 	.word	0x40010400

08000ccc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	807b      	strh	r3, [r7, #2]
 8000cd8:	4613      	mov	r3, r2
 8000cda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000cdc:	787b      	ldrb	r3, [r7, #1]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d003      	beq.n	8000cea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ce2:	887a      	ldrh	r2, [r7, #2]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ce8:	e002      	b.n	8000cf0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cea:	887a      	ldrh	r2, [r7, #2]
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000cf0:	bf00      	nop
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	460b      	mov	r3, r1
 8000d06:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	695b      	ldr	r3, [r3, #20]
 8000d0c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d0e:	887a      	ldrh	r2, [r7, #2]
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	4013      	ands	r3, r2
 8000d14:	041a      	lsls	r2, r3, #16
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	43d9      	mvns	r1, r3
 8000d1a:	887b      	ldrh	r3, [r7, #2]
 8000d1c:	400b      	ands	r3, r1
 8000d1e:	431a      	orrs	r2, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	619a      	str	r2, [r3, #24]
}
 8000d24:	bf00      	nop
 8000d26:	3714      	adds	r7, #20
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000d34:	4b0d      	ldr	r3, [pc, #52]	@ (8000d6c <HAL_PWREx_GetVoltageRange+0x3c>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000d3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d40:	d102      	bne.n	8000d48 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8000d42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d46:	e00b      	b.n	8000d60 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8000d48:	4b08      	ldr	r3, [pc, #32]	@ (8000d6c <HAL_PWREx_GetVoltageRange+0x3c>)
 8000d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000d56:	d102      	bne.n	8000d5e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8000d58:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d5c:	e000      	b.n	8000d60 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8000d5e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	40007000 	.word	0x40007000

08000d70 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d141      	bne.n	8000e02 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000d7e:	4b4b      	ldr	r3, [pc, #300]	@ (8000eac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000d86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d8a:	d131      	bne.n	8000df0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000d8c:	4b47      	ldr	r3, [pc, #284]	@ (8000eac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d92:	4a46      	ldr	r2, [pc, #280]	@ (8000eac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000d98:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d9c:	4b43      	ldr	r3, [pc, #268]	@ (8000eac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000da4:	4a41      	ldr	r2, [pc, #260]	@ (8000eac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000da6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000daa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8000dac:	4b40      	ldr	r3, [pc, #256]	@ (8000eb0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2232      	movs	r2, #50	@ 0x32
 8000db2:	fb02 f303 	mul.w	r3, r2, r3
 8000db6:	4a3f      	ldr	r2, [pc, #252]	@ (8000eb4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000db8:	fba2 2303 	umull	r2, r3, r2, r3
 8000dbc:	0c9b      	lsrs	r3, r3, #18
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000dc2:	e002      	b.n	8000dca <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	3b01      	subs	r3, #1
 8000dc8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000dca:	4b38      	ldr	r3, [pc, #224]	@ (8000eac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dcc:	695b      	ldr	r3, [r3, #20]
 8000dce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000dd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000dd6:	d102      	bne.n	8000dde <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d1f2      	bne.n	8000dc4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000dde:	4b33      	ldr	r3, [pc, #204]	@ (8000eac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000de0:	695b      	ldr	r3, [r3, #20]
 8000de2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000de6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000dea:	d158      	bne.n	8000e9e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000dec:	2303      	movs	r3, #3
 8000dee:	e057      	b.n	8000ea0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000df0:	4b2e      	ldr	r3, [pc, #184]	@ (8000eac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000df2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000df6:	4a2d      	ldr	r2, [pc, #180]	@ (8000eac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000df8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000dfc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8000e00:	e04d      	b.n	8000e9e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000e08:	d141      	bne.n	8000e8e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e0a:	4b28      	ldr	r3, [pc, #160]	@ (8000eac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000e12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e16:	d131      	bne.n	8000e7c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000e18:	4b24      	ldr	r3, [pc, #144]	@ (8000eac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e1e:	4a23      	ldr	r2, [pc, #140]	@ (8000eac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e24:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e28:	4b20      	ldr	r3, [pc, #128]	@ (8000eac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000e30:	4a1e      	ldr	r2, [pc, #120]	@ (8000eac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e32:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e36:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8000e38:	4b1d      	ldr	r3, [pc, #116]	@ (8000eb0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2232      	movs	r2, #50	@ 0x32
 8000e3e:	fb02 f303 	mul.w	r3, r2, r3
 8000e42:	4a1c      	ldr	r2, [pc, #112]	@ (8000eb4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000e44:	fba2 2303 	umull	r2, r3, r2, r3
 8000e48:	0c9b      	lsrs	r3, r3, #18
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e4e:	e002      	b.n	8000e56 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	3b01      	subs	r3, #1
 8000e54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e56:	4b15      	ldr	r3, [pc, #84]	@ (8000eac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e58:	695b      	ldr	r3, [r3, #20]
 8000e5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e62:	d102      	bne.n	8000e6a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d1f2      	bne.n	8000e50 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e6a:	4b10      	ldr	r3, [pc, #64]	@ (8000eac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e6c:	695b      	ldr	r3, [r3, #20]
 8000e6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e76:	d112      	bne.n	8000e9e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	e011      	b.n	8000ea0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000eac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e82:	4a0a      	ldr	r2, [pc, #40]	@ (8000eac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e88:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8000e8c:	e007      	b.n	8000e9e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e8e:	4b07      	ldr	r3, [pc, #28]	@ (8000eac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000e96:	4a05      	ldr	r2, [pc, #20]	@ (8000eac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e98:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e9c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000e9e:	2300      	movs	r3, #0
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3714      	adds	r7, #20
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	40007000 	.word	0x40007000
 8000eb0:	20040004 	.word	0x20040004
 8000eb4:	431bde83 	.word	0x431bde83

08000eb8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b088      	sub	sp, #32
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d102      	bne.n	8000ecc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	f000 bc08 	b.w	80016dc <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ecc:	4b96      	ldr	r3, [pc, #600]	@ (8001128 <HAL_RCC_OscConfig+0x270>)
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	f003 030c 	and.w	r3, r3, #12
 8000ed4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ed6:	4b94      	ldr	r3, [pc, #592]	@ (8001128 <HAL_RCC_OscConfig+0x270>)
 8000ed8:	68db      	ldr	r3, [r3, #12]
 8000eda:	f003 0303 	and.w	r3, r3, #3
 8000ede:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f003 0310 	and.w	r3, r3, #16
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	f000 80e4 	beq.w	80010b6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000eee:	69bb      	ldr	r3, [r7, #24]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d007      	beq.n	8000f04 <HAL_RCC_OscConfig+0x4c>
 8000ef4:	69bb      	ldr	r3, [r7, #24]
 8000ef6:	2b0c      	cmp	r3, #12
 8000ef8:	f040 808b 	bne.w	8001012 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	f040 8087 	bne.w	8001012 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f04:	4b88      	ldr	r3, [pc, #544]	@ (8001128 <HAL_RCC_OscConfig+0x270>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f003 0302 	and.w	r3, r3, #2
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d005      	beq.n	8000f1c <HAL_RCC_OscConfig+0x64>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	699b      	ldr	r3, [r3, #24]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d101      	bne.n	8000f1c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e3df      	b.n	80016dc <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6a1a      	ldr	r2, [r3, #32]
 8000f20:	4b81      	ldr	r3, [pc, #516]	@ (8001128 <HAL_RCC_OscConfig+0x270>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f003 0308 	and.w	r3, r3, #8
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d004      	beq.n	8000f36 <HAL_RCC_OscConfig+0x7e>
 8000f2c:	4b7e      	ldr	r3, [pc, #504]	@ (8001128 <HAL_RCC_OscConfig+0x270>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000f34:	e005      	b.n	8000f42 <HAL_RCC_OscConfig+0x8a>
 8000f36:	4b7c      	ldr	r3, [pc, #496]	@ (8001128 <HAL_RCC_OscConfig+0x270>)
 8000f38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f3c:	091b      	lsrs	r3, r3, #4
 8000f3e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d223      	bcs.n	8000f8e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6a1b      	ldr	r3, [r3, #32]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f000 fd94 	bl	8001a78 <RCC_SetFlashLatencyFromMSIRange>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e3c0      	b.n	80016dc <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f5a:	4b73      	ldr	r3, [pc, #460]	@ (8001128 <HAL_RCC_OscConfig+0x270>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a72      	ldr	r2, [pc, #456]	@ (8001128 <HAL_RCC_OscConfig+0x270>)
 8000f60:	f043 0308 	orr.w	r3, r3, #8
 8000f64:	6013      	str	r3, [r2, #0]
 8000f66:	4b70      	ldr	r3, [pc, #448]	@ (8001128 <HAL_RCC_OscConfig+0x270>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6a1b      	ldr	r3, [r3, #32]
 8000f72:	496d      	ldr	r1, [pc, #436]	@ (8001128 <HAL_RCC_OscConfig+0x270>)
 8000f74:	4313      	orrs	r3, r2
 8000f76:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f78:	4b6b      	ldr	r3, [pc, #428]	@ (8001128 <HAL_RCC_OscConfig+0x270>)
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	69db      	ldr	r3, [r3, #28]
 8000f84:	021b      	lsls	r3, r3, #8
 8000f86:	4968      	ldr	r1, [pc, #416]	@ (8001128 <HAL_RCC_OscConfig+0x270>)
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	604b      	str	r3, [r1, #4]
 8000f8c:	e025      	b.n	8000fda <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f8e:	4b66      	ldr	r3, [pc, #408]	@ (8001128 <HAL_RCC_OscConfig+0x270>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a65      	ldr	r2, [pc, #404]	@ (8001128 <HAL_RCC_OscConfig+0x270>)
 8000f94:	f043 0308 	orr.w	r3, r3, #8
 8000f98:	6013      	str	r3, [r2, #0]
 8000f9a:	4b63      	ldr	r3, [pc, #396]	@ (8001128 <HAL_RCC_OscConfig+0x270>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6a1b      	ldr	r3, [r3, #32]
 8000fa6:	4960      	ldr	r1, [pc, #384]	@ (8001128 <HAL_RCC_OscConfig+0x270>)
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fac:	4b5e      	ldr	r3, [pc, #376]	@ (8001128 <HAL_RCC_OscConfig+0x270>)
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	69db      	ldr	r3, [r3, #28]
 8000fb8:	021b      	lsls	r3, r3, #8
 8000fba:	495b      	ldr	r1, [pc, #364]	@ (8001128 <HAL_RCC_OscConfig+0x270>)
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d109      	bne.n	8000fda <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6a1b      	ldr	r3, [r3, #32]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f000 fd54 	bl	8001a78 <RCC_SetFlashLatencyFromMSIRange>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e380      	b.n	80016dc <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000fda:	f000 fcc1 	bl	8001960 <HAL_RCC_GetSysClockFreq>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	4b51      	ldr	r3, [pc, #324]	@ (8001128 <HAL_RCC_OscConfig+0x270>)
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	091b      	lsrs	r3, r3, #4
 8000fe6:	f003 030f 	and.w	r3, r3, #15
 8000fea:	4950      	ldr	r1, [pc, #320]	@ (800112c <HAL_RCC_OscConfig+0x274>)
 8000fec:	5ccb      	ldrb	r3, [r1, r3]
 8000fee:	f003 031f 	and.w	r3, r3, #31
 8000ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8000ff6:	4a4e      	ldr	r2, [pc, #312]	@ (8001130 <HAL_RCC_OscConfig+0x278>)
 8000ff8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000ffa:	4b4e      	ldr	r3, [pc, #312]	@ (8001134 <HAL_RCC_OscConfig+0x27c>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff fae2 	bl	80005c8 <HAL_InitTick>
 8001004:	4603      	mov	r3, r0
 8001006:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001008:	7bfb      	ldrb	r3, [r7, #15]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d052      	beq.n	80010b4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800100e:	7bfb      	ldrb	r3, [r7, #15]
 8001010:	e364      	b.n	80016dc <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	699b      	ldr	r3, [r3, #24]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d032      	beq.n	8001080 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800101a:	4b43      	ldr	r3, [pc, #268]	@ (8001128 <HAL_RCC_OscConfig+0x270>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a42      	ldr	r2, [pc, #264]	@ (8001128 <HAL_RCC_OscConfig+0x270>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001026:	f7ff fb1f 	bl	8000668 <HAL_GetTick>
 800102a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800102c:	e008      	b.n	8001040 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800102e:	f7ff fb1b 	bl	8000668 <HAL_GetTick>
 8001032:	4602      	mov	r2, r0
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	2b02      	cmp	r3, #2
 800103a:	d901      	bls.n	8001040 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800103c:	2303      	movs	r3, #3
 800103e:	e34d      	b.n	80016dc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001040:	4b39      	ldr	r3, [pc, #228]	@ (8001128 <HAL_RCC_OscConfig+0x270>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f003 0302 	and.w	r3, r3, #2
 8001048:	2b00      	cmp	r3, #0
 800104a:	d0f0      	beq.n	800102e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800104c:	4b36      	ldr	r3, [pc, #216]	@ (8001128 <HAL_RCC_OscConfig+0x270>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a35      	ldr	r2, [pc, #212]	@ (8001128 <HAL_RCC_OscConfig+0x270>)
 8001052:	f043 0308 	orr.w	r3, r3, #8
 8001056:	6013      	str	r3, [r2, #0]
 8001058:	4b33      	ldr	r3, [pc, #204]	@ (8001128 <HAL_RCC_OscConfig+0x270>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6a1b      	ldr	r3, [r3, #32]
 8001064:	4930      	ldr	r1, [pc, #192]	@ (8001128 <HAL_RCC_OscConfig+0x270>)
 8001066:	4313      	orrs	r3, r2
 8001068:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800106a:	4b2f      	ldr	r3, [pc, #188]	@ (8001128 <HAL_RCC_OscConfig+0x270>)
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	69db      	ldr	r3, [r3, #28]
 8001076:	021b      	lsls	r3, r3, #8
 8001078:	492b      	ldr	r1, [pc, #172]	@ (8001128 <HAL_RCC_OscConfig+0x270>)
 800107a:	4313      	orrs	r3, r2
 800107c:	604b      	str	r3, [r1, #4]
 800107e:	e01a      	b.n	80010b6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001080:	4b29      	ldr	r3, [pc, #164]	@ (8001128 <HAL_RCC_OscConfig+0x270>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a28      	ldr	r2, [pc, #160]	@ (8001128 <HAL_RCC_OscConfig+0x270>)
 8001086:	f023 0301 	bic.w	r3, r3, #1
 800108a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800108c:	f7ff faec 	bl	8000668 <HAL_GetTick>
 8001090:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001092:	e008      	b.n	80010a6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001094:	f7ff fae8 	bl	8000668 <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d901      	bls.n	80010a6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80010a2:	2303      	movs	r3, #3
 80010a4:	e31a      	b.n	80016dc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80010a6:	4b20      	ldr	r3, [pc, #128]	@ (8001128 <HAL_RCC_OscConfig+0x270>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f003 0302 	and.w	r3, r3, #2
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d1f0      	bne.n	8001094 <HAL_RCC_OscConfig+0x1dc>
 80010b2:	e000      	b.n	80010b6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80010b4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d073      	beq.n	80011aa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80010c2:	69bb      	ldr	r3, [r7, #24]
 80010c4:	2b08      	cmp	r3, #8
 80010c6:	d005      	beq.n	80010d4 <HAL_RCC_OscConfig+0x21c>
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	2b0c      	cmp	r3, #12
 80010cc:	d10e      	bne.n	80010ec <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	2b03      	cmp	r3, #3
 80010d2:	d10b      	bne.n	80010ec <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010d4:	4b14      	ldr	r3, [pc, #80]	@ (8001128 <HAL_RCC_OscConfig+0x270>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d063      	beq.n	80011a8 <HAL_RCC_OscConfig+0x2f0>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d15f      	bne.n	80011a8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e2f7      	b.n	80016dc <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010f4:	d106      	bne.n	8001104 <HAL_RCC_OscConfig+0x24c>
 80010f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001128 <HAL_RCC_OscConfig+0x270>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a0b      	ldr	r2, [pc, #44]	@ (8001128 <HAL_RCC_OscConfig+0x270>)
 80010fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001100:	6013      	str	r3, [r2, #0]
 8001102:	e025      	b.n	8001150 <HAL_RCC_OscConfig+0x298>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800110c:	d114      	bne.n	8001138 <HAL_RCC_OscConfig+0x280>
 800110e:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <HAL_RCC_OscConfig+0x270>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a05      	ldr	r2, [pc, #20]	@ (8001128 <HAL_RCC_OscConfig+0x270>)
 8001114:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001118:	6013      	str	r3, [r2, #0]
 800111a:	4b03      	ldr	r3, [pc, #12]	@ (8001128 <HAL_RCC_OscConfig+0x270>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a02      	ldr	r2, [pc, #8]	@ (8001128 <HAL_RCC_OscConfig+0x270>)
 8001120:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001124:	6013      	str	r3, [r2, #0]
 8001126:	e013      	b.n	8001150 <HAL_RCC_OscConfig+0x298>
 8001128:	40021000 	.word	0x40021000
 800112c:	080026f4 	.word	0x080026f4
 8001130:	20040004 	.word	0x20040004
 8001134:	20040008 	.word	0x20040008
 8001138:	4ba0      	ldr	r3, [pc, #640]	@ (80013bc <HAL_RCC_OscConfig+0x504>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a9f      	ldr	r2, [pc, #636]	@ (80013bc <HAL_RCC_OscConfig+0x504>)
 800113e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001142:	6013      	str	r3, [r2, #0]
 8001144:	4b9d      	ldr	r3, [pc, #628]	@ (80013bc <HAL_RCC_OscConfig+0x504>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a9c      	ldr	r2, [pc, #624]	@ (80013bc <HAL_RCC_OscConfig+0x504>)
 800114a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800114e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d013      	beq.n	8001180 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001158:	f7ff fa86 	bl	8000668 <HAL_GetTick>
 800115c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800115e:	e008      	b.n	8001172 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001160:	f7ff fa82 	bl	8000668 <HAL_GetTick>
 8001164:	4602      	mov	r2, r0
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	2b64      	cmp	r3, #100	@ 0x64
 800116c:	d901      	bls.n	8001172 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800116e:	2303      	movs	r3, #3
 8001170:	e2b4      	b.n	80016dc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001172:	4b92      	ldr	r3, [pc, #584]	@ (80013bc <HAL_RCC_OscConfig+0x504>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d0f0      	beq.n	8001160 <HAL_RCC_OscConfig+0x2a8>
 800117e:	e014      	b.n	80011aa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001180:	f7ff fa72 	bl	8000668 <HAL_GetTick>
 8001184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001186:	e008      	b.n	800119a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001188:	f7ff fa6e 	bl	8000668 <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	2b64      	cmp	r3, #100	@ 0x64
 8001194:	d901      	bls.n	800119a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	e2a0      	b.n	80016dc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800119a:	4b88      	ldr	r3, [pc, #544]	@ (80013bc <HAL_RCC_OscConfig+0x504>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d1f0      	bne.n	8001188 <HAL_RCC_OscConfig+0x2d0>
 80011a6:	e000      	b.n	80011aa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d060      	beq.n	8001278 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	2b04      	cmp	r3, #4
 80011ba:	d005      	beq.n	80011c8 <HAL_RCC_OscConfig+0x310>
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	2b0c      	cmp	r3, #12
 80011c0:	d119      	bne.n	80011f6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d116      	bne.n	80011f6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011c8:	4b7c      	ldr	r3, [pc, #496]	@ (80013bc <HAL_RCC_OscConfig+0x504>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d005      	beq.n	80011e0 <HAL_RCC_OscConfig+0x328>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d101      	bne.n	80011e0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	e27d      	b.n	80016dc <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011e0:	4b76      	ldr	r3, [pc, #472]	@ (80013bc <HAL_RCC_OscConfig+0x504>)
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	691b      	ldr	r3, [r3, #16]
 80011ec:	061b      	lsls	r3, r3, #24
 80011ee:	4973      	ldr	r1, [pc, #460]	@ (80013bc <HAL_RCC_OscConfig+0x504>)
 80011f0:	4313      	orrs	r3, r2
 80011f2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011f4:	e040      	b.n	8001278 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	68db      	ldr	r3, [r3, #12]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d023      	beq.n	8001246 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011fe:	4b6f      	ldr	r3, [pc, #444]	@ (80013bc <HAL_RCC_OscConfig+0x504>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a6e      	ldr	r2, [pc, #440]	@ (80013bc <HAL_RCC_OscConfig+0x504>)
 8001204:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001208:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800120a:	f7ff fa2d 	bl	8000668 <HAL_GetTick>
 800120e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001210:	e008      	b.n	8001224 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001212:	f7ff fa29 	bl	8000668 <HAL_GetTick>
 8001216:	4602      	mov	r2, r0
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	2b02      	cmp	r3, #2
 800121e:	d901      	bls.n	8001224 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001220:	2303      	movs	r3, #3
 8001222:	e25b      	b.n	80016dc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001224:	4b65      	ldr	r3, [pc, #404]	@ (80013bc <HAL_RCC_OscConfig+0x504>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800122c:	2b00      	cmp	r3, #0
 800122e:	d0f0      	beq.n	8001212 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001230:	4b62      	ldr	r3, [pc, #392]	@ (80013bc <HAL_RCC_OscConfig+0x504>)
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	691b      	ldr	r3, [r3, #16]
 800123c:	061b      	lsls	r3, r3, #24
 800123e:	495f      	ldr	r1, [pc, #380]	@ (80013bc <HAL_RCC_OscConfig+0x504>)
 8001240:	4313      	orrs	r3, r2
 8001242:	604b      	str	r3, [r1, #4]
 8001244:	e018      	b.n	8001278 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001246:	4b5d      	ldr	r3, [pc, #372]	@ (80013bc <HAL_RCC_OscConfig+0x504>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a5c      	ldr	r2, [pc, #368]	@ (80013bc <HAL_RCC_OscConfig+0x504>)
 800124c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001250:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001252:	f7ff fa09 	bl	8000668 <HAL_GetTick>
 8001256:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001258:	e008      	b.n	800126c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800125a:	f7ff fa05 	bl	8000668 <HAL_GetTick>
 800125e:	4602      	mov	r2, r0
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	2b02      	cmp	r3, #2
 8001266:	d901      	bls.n	800126c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001268:	2303      	movs	r3, #3
 800126a:	e237      	b.n	80016dc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800126c:	4b53      	ldr	r3, [pc, #332]	@ (80013bc <HAL_RCC_OscConfig+0x504>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001274:	2b00      	cmp	r3, #0
 8001276:	d1f0      	bne.n	800125a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 0308 	and.w	r3, r3, #8
 8001280:	2b00      	cmp	r3, #0
 8001282:	d03c      	beq.n	80012fe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	695b      	ldr	r3, [r3, #20]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d01c      	beq.n	80012c6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800128c:	4b4b      	ldr	r3, [pc, #300]	@ (80013bc <HAL_RCC_OscConfig+0x504>)
 800128e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001292:	4a4a      	ldr	r2, [pc, #296]	@ (80013bc <HAL_RCC_OscConfig+0x504>)
 8001294:	f043 0301 	orr.w	r3, r3, #1
 8001298:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800129c:	f7ff f9e4 	bl	8000668 <HAL_GetTick>
 80012a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80012a2:	e008      	b.n	80012b6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012a4:	f7ff f9e0 	bl	8000668 <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e212      	b.n	80016dc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80012b6:	4b41      	ldr	r3, [pc, #260]	@ (80013bc <HAL_RCC_OscConfig+0x504>)
 80012b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80012bc:	f003 0302 	and.w	r3, r3, #2
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d0ef      	beq.n	80012a4 <HAL_RCC_OscConfig+0x3ec>
 80012c4:	e01b      	b.n	80012fe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012c6:	4b3d      	ldr	r3, [pc, #244]	@ (80013bc <HAL_RCC_OscConfig+0x504>)
 80012c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80012cc:	4a3b      	ldr	r2, [pc, #236]	@ (80013bc <HAL_RCC_OscConfig+0x504>)
 80012ce:	f023 0301 	bic.w	r3, r3, #1
 80012d2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012d6:	f7ff f9c7 	bl	8000668 <HAL_GetTick>
 80012da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80012dc:	e008      	b.n	80012f0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012de:	f7ff f9c3 	bl	8000668 <HAL_GetTick>
 80012e2:	4602      	mov	r2, r0
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d901      	bls.n	80012f0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80012ec:	2303      	movs	r3, #3
 80012ee:	e1f5      	b.n	80016dc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80012f0:	4b32      	ldr	r3, [pc, #200]	@ (80013bc <HAL_RCC_OscConfig+0x504>)
 80012f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d1ef      	bne.n	80012de <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0304 	and.w	r3, r3, #4
 8001306:	2b00      	cmp	r3, #0
 8001308:	f000 80a6 	beq.w	8001458 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800130c:	2300      	movs	r3, #0
 800130e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001310:	4b2a      	ldr	r3, [pc, #168]	@ (80013bc <HAL_RCC_OscConfig+0x504>)
 8001312:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001314:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d10d      	bne.n	8001338 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800131c:	4b27      	ldr	r3, [pc, #156]	@ (80013bc <HAL_RCC_OscConfig+0x504>)
 800131e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001320:	4a26      	ldr	r2, [pc, #152]	@ (80013bc <HAL_RCC_OscConfig+0x504>)
 8001322:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001326:	6593      	str	r3, [r2, #88]	@ 0x58
 8001328:	4b24      	ldr	r3, [pc, #144]	@ (80013bc <HAL_RCC_OscConfig+0x504>)
 800132a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800132c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001330:	60bb      	str	r3, [r7, #8]
 8001332:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001334:	2301      	movs	r3, #1
 8001336:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001338:	4b21      	ldr	r3, [pc, #132]	@ (80013c0 <HAL_RCC_OscConfig+0x508>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001340:	2b00      	cmp	r3, #0
 8001342:	d118      	bne.n	8001376 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001344:	4b1e      	ldr	r3, [pc, #120]	@ (80013c0 <HAL_RCC_OscConfig+0x508>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a1d      	ldr	r2, [pc, #116]	@ (80013c0 <HAL_RCC_OscConfig+0x508>)
 800134a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800134e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001350:	f7ff f98a 	bl	8000668 <HAL_GetTick>
 8001354:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001358:	f7ff f986 	bl	8000668 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e1b8      	b.n	80016dc <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800136a:	4b15      	ldr	r3, [pc, #84]	@ (80013c0 <HAL_RCC_OscConfig+0x508>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001372:	2b00      	cmp	r3, #0
 8001374:	d0f0      	beq.n	8001358 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	2b01      	cmp	r3, #1
 800137c:	d108      	bne.n	8001390 <HAL_RCC_OscConfig+0x4d8>
 800137e:	4b0f      	ldr	r3, [pc, #60]	@ (80013bc <HAL_RCC_OscConfig+0x504>)
 8001380:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001384:	4a0d      	ldr	r2, [pc, #52]	@ (80013bc <HAL_RCC_OscConfig+0x504>)
 8001386:	f043 0301 	orr.w	r3, r3, #1
 800138a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800138e:	e029      	b.n	80013e4 <HAL_RCC_OscConfig+0x52c>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	2b05      	cmp	r3, #5
 8001396:	d115      	bne.n	80013c4 <HAL_RCC_OscConfig+0x50c>
 8001398:	4b08      	ldr	r3, [pc, #32]	@ (80013bc <HAL_RCC_OscConfig+0x504>)
 800139a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800139e:	4a07      	ldr	r2, [pc, #28]	@ (80013bc <HAL_RCC_OscConfig+0x504>)
 80013a0:	f043 0304 	orr.w	r3, r3, #4
 80013a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80013a8:	4b04      	ldr	r3, [pc, #16]	@ (80013bc <HAL_RCC_OscConfig+0x504>)
 80013aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013ae:	4a03      	ldr	r2, [pc, #12]	@ (80013bc <HAL_RCC_OscConfig+0x504>)
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80013b8:	e014      	b.n	80013e4 <HAL_RCC_OscConfig+0x52c>
 80013ba:	bf00      	nop
 80013bc:	40021000 	.word	0x40021000
 80013c0:	40007000 	.word	0x40007000
 80013c4:	4b9d      	ldr	r3, [pc, #628]	@ (800163c <HAL_RCC_OscConfig+0x784>)
 80013c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013ca:	4a9c      	ldr	r2, [pc, #624]	@ (800163c <HAL_RCC_OscConfig+0x784>)
 80013cc:	f023 0301 	bic.w	r3, r3, #1
 80013d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80013d4:	4b99      	ldr	r3, [pc, #612]	@ (800163c <HAL_RCC_OscConfig+0x784>)
 80013d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013da:	4a98      	ldr	r2, [pc, #608]	@ (800163c <HAL_RCC_OscConfig+0x784>)
 80013dc:	f023 0304 	bic.w	r3, r3, #4
 80013e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d016      	beq.n	800141a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013ec:	f7ff f93c 	bl	8000668 <HAL_GetTick>
 80013f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80013f2:	e00a      	b.n	800140a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013f4:	f7ff f938 	bl	8000668 <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001402:	4293      	cmp	r3, r2
 8001404:	d901      	bls.n	800140a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e168      	b.n	80016dc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800140a:	4b8c      	ldr	r3, [pc, #560]	@ (800163c <HAL_RCC_OscConfig+0x784>)
 800140c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001410:	f003 0302 	and.w	r3, r3, #2
 8001414:	2b00      	cmp	r3, #0
 8001416:	d0ed      	beq.n	80013f4 <HAL_RCC_OscConfig+0x53c>
 8001418:	e015      	b.n	8001446 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800141a:	f7ff f925 	bl	8000668 <HAL_GetTick>
 800141e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001420:	e00a      	b.n	8001438 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001422:	f7ff f921 	bl	8000668 <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001430:	4293      	cmp	r3, r2
 8001432:	d901      	bls.n	8001438 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001434:	2303      	movs	r3, #3
 8001436:	e151      	b.n	80016dc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001438:	4b80      	ldr	r3, [pc, #512]	@ (800163c <HAL_RCC_OscConfig+0x784>)
 800143a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	2b00      	cmp	r3, #0
 8001444:	d1ed      	bne.n	8001422 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001446:	7ffb      	ldrb	r3, [r7, #31]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d105      	bne.n	8001458 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800144c:	4b7b      	ldr	r3, [pc, #492]	@ (800163c <HAL_RCC_OscConfig+0x784>)
 800144e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001450:	4a7a      	ldr	r2, [pc, #488]	@ (800163c <HAL_RCC_OscConfig+0x784>)
 8001452:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001456:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 0320 	and.w	r3, r3, #32
 8001460:	2b00      	cmp	r3, #0
 8001462:	d03c      	beq.n	80014de <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001468:	2b00      	cmp	r3, #0
 800146a:	d01c      	beq.n	80014a6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800146c:	4b73      	ldr	r3, [pc, #460]	@ (800163c <HAL_RCC_OscConfig+0x784>)
 800146e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001472:	4a72      	ldr	r2, [pc, #456]	@ (800163c <HAL_RCC_OscConfig+0x784>)
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800147c:	f7ff f8f4 	bl	8000668 <HAL_GetTick>
 8001480:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001482:	e008      	b.n	8001496 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001484:	f7ff f8f0 	bl	8000668 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b02      	cmp	r3, #2
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e122      	b.n	80016dc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001496:	4b69      	ldr	r3, [pc, #420]	@ (800163c <HAL_RCC_OscConfig+0x784>)
 8001498:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800149c:	f003 0302 	and.w	r3, r3, #2
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d0ef      	beq.n	8001484 <HAL_RCC_OscConfig+0x5cc>
 80014a4:	e01b      	b.n	80014de <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80014a6:	4b65      	ldr	r3, [pc, #404]	@ (800163c <HAL_RCC_OscConfig+0x784>)
 80014a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80014ac:	4a63      	ldr	r2, [pc, #396]	@ (800163c <HAL_RCC_OscConfig+0x784>)
 80014ae:	f023 0301 	bic.w	r3, r3, #1
 80014b2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014b6:	f7ff f8d7 	bl	8000668 <HAL_GetTick>
 80014ba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80014bc:	e008      	b.n	80014d0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014be:	f7ff f8d3 	bl	8000668 <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d901      	bls.n	80014d0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e105      	b.n	80016dc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80014d0:	4b5a      	ldr	r3, [pc, #360]	@ (800163c <HAL_RCC_OscConfig+0x784>)
 80014d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d1ef      	bne.n	80014be <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	f000 80f9 	beq.w	80016da <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	f040 80cf 	bne.w	8001690 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80014f2:	4b52      	ldr	r3, [pc, #328]	@ (800163c <HAL_RCC_OscConfig+0x784>)
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	f003 0203 	and.w	r2, r3, #3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001502:	429a      	cmp	r2, r3
 8001504:	d12c      	bne.n	8001560 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001510:	3b01      	subs	r3, #1
 8001512:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001514:	429a      	cmp	r2, r3
 8001516:	d123      	bne.n	8001560 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001522:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001524:	429a      	cmp	r2, r3
 8001526:	d11b      	bne.n	8001560 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001532:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001534:	429a      	cmp	r2, r3
 8001536:	d113      	bne.n	8001560 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001542:	085b      	lsrs	r3, r3, #1
 8001544:	3b01      	subs	r3, #1
 8001546:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001548:	429a      	cmp	r2, r3
 800154a:	d109      	bne.n	8001560 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001556:	085b      	lsrs	r3, r3, #1
 8001558:	3b01      	subs	r3, #1
 800155a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800155c:	429a      	cmp	r2, r3
 800155e:	d071      	beq.n	8001644 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	2b0c      	cmp	r3, #12
 8001564:	d068      	beq.n	8001638 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001566:	4b35      	ldr	r3, [pc, #212]	@ (800163c <HAL_RCC_OscConfig+0x784>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d105      	bne.n	800157e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001572:	4b32      	ldr	r3, [pc, #200]	@ (800163c <HAL_RCC_OscConfig+0x784>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e0ac      	b.n	80016dc <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001582:	4b2e      	ldr	r3, [pc, #184]	@ (800163c <HAL_RCC_OscConfig+0x784>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a2d      	ldr	r2, [pc, #180]	@ (800163c <HAL_RCC_OscConfig+0x784>)
 8001588:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800158c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800158e:	f7ff f86b 	bl	8000668 <HAL_GetTick>
 8001592:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001594:	e008      	b.n	80015a8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001596:	f7ff f867 	bl	8000668 <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e099      	b.n	80016dc <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015a8:	4b24      	ldr	r3, [pc, #144]	@ (800163c <HAL_RCC_OscConfig+0x784>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d1f0      	bne.n	8001596 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015b4:	4b21      	ldr	r3, [pc, #132]	@ (800163c <HAL_RCC_OscConfig+0x784>)
 80015b6:	68da      	ldr	r2, [r3, #12]
 80015b8:	4b21      	ldr	r3, [pc, #132]	@ (8001640 <HAL_RCC_OscConfig+0x788>)
 80015ba:	4013      	ands	r3, r2
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80015c4:	3a01      	subs	r2, #1
 80015c6:	0112      	lsls	r2, r2, #4
 80015c8:	4311      	orrs	r1, r2
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80015ce:	0212      	lsls	r2, r2, #8
 80015d0:	4311      	orrs	r1, r2
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80015d6:	0852      	lsrs	r2, r2, #1
 80015d8:	3a01      	subs	r2, #1
 80015da:	0552      	lsls	r2, r2, #21
 80015dc:	4311      	orrs	r1, r2
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80015e2:	0852      	lsrs	r2, r2, #1
 80015e4:	3a01      	subs	r2, #1
 80015e6:	0652      	lsls	r2, r2, #25
 80015e8:	4311      	orrs	r1, r2
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80015ee:	06d2      	lsls	r2, r2, #27
 80015f0:	430a      	orrs	r2, r1
 80015f2:	4912      	ldr	r1, [pc, #72]	@ (800163c <HAL_RCC_OscConfig+0x784>)
 80015f4:	4313      	orrs	r3, r2
 80015f6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80015f8:	4b10      	ldr	r3, [pc, #64]	@ (800163c <HAL_RCC_OscConfig+0x784>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a0f      	ldr	r2, [pc, #60]	@ (800163c <HAL_RCC_OscConfig+0x784>)
 80015fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001602:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001604:	4b0d      	ldr	r3, [pc, #52]	@ (800163c <HAL_RCC_OscConfig+0x784>)
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	4a0c      	ldr	r2, [pc, #48]	@ (800163c <HAL_RCC_OscConfig+0x784>)
 800160a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800160e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001610:	f7ff f82a 	bl	8000668 <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001618:	f7ff f826 	bl	8000668 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e058      	b.n	80016dc <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800162a:	4b04      	ldr	r3, [pc, #16]	@ (800163c <HAL_RCC_OscConfig+0x784>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d0f0      	beq.n	8001618 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001636:	e050      	b.n	80016da <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e04f      	b.n	80016dc <HAL_RCC_OscConfig+0x824>
 800163c:	40021000 	.word	0x40021000
 8001640:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001644:	4b27      	ldr	r3, [pc, #156]	@ (80016e4 <HAL_RCC_OscConfig+0x82c>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d144      	bne.n	80016da <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001650:	4b24      	ldr	r3, [pc, #144]	@ (80016e4 <HAL_RCC_OscConfig+0x82c>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a23      	ldr	r2, [pc, #140]	@ (80016e4 <HAL_RCC_OscConfig+0x82c>)
 8001656:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800165a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800165c:	4b21      	ldr	r3, [pc, #132]	@ (80016e4 <HAL_RCC_OscConfig+0x82c>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	4a20      	ldr	r2, [pc, #128]	@ (80016e4 <HAL_RCC_OscConfig+0x82c>)
 8001662:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001666:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001668:	f7fe fffe 	bl	8000668 <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001670:	f7fe fffa 	bl	8000668 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e02c      	b.n	80016dc <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001682:	4b18      	ldr	r3, [pc, #96]	@ (80016e4 <HAL_RCC_OscConfig+0x82c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d0f0      	beq.n	8001670 <HAL_RCC_OscConfig+0x7b8>
 800168e:	e024      	b.n	80016da <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	2b0c      	cmp	r3, #12
 8001694:	d01f      	beq.n	80016d6 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001696:	4b13      	ldr	r3, [pc, #76]	@ (80016e4 <HAL_RCC_OscConfig+0x82c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a12      	ldr	r2, [pc, #72]	@ (80016e4 <HAL_RCC_OscConfig+0x82c>)
 800169c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80016a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a2:	f7fe ffe1 	bl	8000668 <HAL_GetTick>
 80016a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016a8:	e008      	b.n	80016bc <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016aa:	f7fe ffdd 	bl	8000668 <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d901      	bls.n	80016bc <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e00f      	b.n	80016dc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016bc:	4b09      	ldr	r3, [pc, #36]	@ (80016e4 <HAL_RCC_OscConfig+0x82c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d1f0      	bne.n	80016aa <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80016c8:	4b06      	ldr	r3, [pc, #24]	@ (80016e4 <HAL_RCC_OscConfig+0x82c>)
 80016ca:	68da      	ldr	r2, [r3, #12]
 80016cc:	4905      	ldr	r1, [pc, #20]	@ (80016e4 <HAL_RCC_OscConfig+0x82c>)
 80016ce:	4b06      	ldr	r3, [pc, #24]	@ (80016e8 <HAL_RCC_OscConfig+0x830>)
 80016d0:	4013      	ands	r3, r2
 80016d2:	60cb      	str	r3, [r1, #12]
 80016d4:	e001      	b.n	80016da <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e000      	b.n	80016dc <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80016da:	2300      	movs	r3, #0
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3720      	adds	r7, #32
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40021000 	.word	0x40021000
 80016e8:	feeefffc 	.word	0xfeeefffc

080016ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80016f6:	2300      	movs	r3, #0
 80016f8:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d101      	bne.n	8001704 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e11d      	b.n	8001940 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001704:	4b90      	ldr	r3, [pc, #576]	@ (8001948 <HAL_RCC_ClockConfig+0x25c>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 030f 	and.w	r3, r3, #15
 800170c:	683a      	ldr	r2, [r7, #0]
 800170e:	429a      	cmp	r2, r3
 8001710:	d910      	bls.n	8001734 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001712:	4b8d      	ldr	r3, [pc, #564]	@ (8001948 <HAL_RCC_ClockConfig+0x25c>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f023 020f 	bic.w	r2, r3, #15
 800171a:	498b      	ldr	r1, [pc, #556]	@ (8001948 <HAL_RCC_ClockConfig+0x25c>)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	4313      	orrs	r3, r2
 8001720:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001722:	4b89      	ldr	r3, [pc, #548]	@ (8001948 <HAL_RCC_ClockConfig+0x25c>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 030f 	and.w	r3, r3, #15
 800172a:	683a      	ldr	r2, [r7, #0]
 800172c:	429a      	cmp	r2, r3
 800172e:	d001      	beq.n	8001734 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e105      	b.n	8001940 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0302 	and.w	r3, r3, #2
 800173c:	2b00      	cmp	r3, #0
 800173e:	d010      	beq.n	8001762 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689a      	ldr	r2, [r3, #8]
 8001744:	4b81      	ldr	r3, [pc, #516]	@ (800194c <HAL_RCC_ClockConfig+0x260>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800174c:	429a      	cmp	r2, r3
 800174e:	d908      	bls.n	8001762 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001750:	4b7e      	ldr	r3, [pc, #504]	@ (800194c <HAL_RCC_ClockConfig+0x260>)
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	497b      	ldr	r1, [pc, #492]	@ (800194c <HAL_RCC_ClockConfig+0x260>)
 800175e:	4313      	orrs	r3, r2
 8001760:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	2b00      	cmp	r3, #0
 800176c:	d079      	beq.n	8001862 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	2b03      	cmp	r3, #3
 8001774:	d11e      	bne.n	80017b4 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001776:	4b75      	ldr	r3, [pc, #468]	@ (800194c <HAL_RCC_ClockConfig+0x260>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d101      	bne.n	8001786 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e0dc      	b.n	8001940 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001786:	f000 f9d1 	bl	8001b2c <RCC_GetSysClockFreqFromPLLSource>
 800178a:	4603      	mov	r3, r0
 800178c:	4a70      	ldr	r2, [pc, #448]	@ (8001950 <HAL_RCC_ClockConfig+0x264>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d946      	bls.n	8001820 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001792:	4b6e      	ldr	r3, [pc, #440]	@ (800194c <HAL_RCC_ClockConfig+0x260>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d140      	bne.n	8001820 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800179e:	4b6b      	ldr	r3, [pc, #428]	@ (800194c <HAL_RCC_ClockConfig+0x260>)
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80017a6:	4a69      	ldr	r2, [pc, #420]	@ (800194c <HAL_RCC_ClockConfig+0x260>)
 80017a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017ac:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80017ae:	2380      	movs	r3, #128	@ 0x80
 80017b0:	617b      	str	r3, [r7, #20]
 80017b2:	e035      	b.n	8001820 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d107      	bne.n	80017cc <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017bc:	4b63      	ldr	r3, [pc, #396]	@ (800194c <HAL_RCC_ClockConfig+0x260>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d115      	bne.n	80017f4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e0b9      	b.n	8001940 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d107      	bne.n	80017e4 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017d4:	4b5d      	ldr	r3, [pc, #372]	@ (800194c <HAL_RCC_ClockConfig+0x260>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d109      	bne.n	80017f4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e0ad      	b.n	8001940 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017e4:	4b59      	ldr	r3, [pc, #356]	@ (800194c <HAL_RCC_ClockConfig+0x260>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d101      	bne.n	80017f4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e0a5      	b.n	8001940 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80017f4:	f000 f8b4 	bl	8001960 <HAL_RCC_GetSysClockFreq>
 80017f8:	4603      	mov	r3, r0
 80017fa:	4a55      	ldr	r2, [pc, #340]	@ (8001950 <HAL_RCC_ClockConfig+0x264>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d90f      	bls.n	8001820 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001800:	4b52      	ldr	r3, [pc, #328]	@ (800194c <HAL_RCC_ClockConfig+0x260>)
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d109      	bne.n	8001820 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800180c:	4b4f      	ldr	r3, [pc, #316]	@ (800194c <HAL_RCC_ClockConfig+0x260>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001814:	4a4d      	ldr	r2, [pc, #308]	@ (800194c <HAL_RCC_ClockConfig+0x260>)
 8001816:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800181a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800181c:	2380      	movs	r3, #128	@ 0x80
 800181e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001820:	4b4a      	ldr	r3, [pc, #296]	@ (800194c <HAL_RCC_ClockConfig+0x260>)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f023 0203 	bic.w	r2, r3, #3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	4947      	ldr	r1, [pc, #284]	@ (800194c <HAL_RCC_ClockConfig+0x260>)
 800182e:	4313      	orrs	r3, r2
 8001830:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001832:	f7fe ff19 	bl	8000668 <HAL_GetTick>
 8001836:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001838:	e00a      	b.n	8001850 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800183a:	f7fe ff15 	bl	8000668 <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001848:	4293      	cmp	r3, r2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e077      	b.n	8001940 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001850:	4b3e      	ldr	r3, [pc, #248]	@ (800194c <HAL_RCC_ClockConfig+0x260>)
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f003 020c 	and.w	r2, r3, #12
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	429a      	cmp	r2, r3
 8001860:	d1eb      	bne.n	800183a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	2b80      	cmp	r3, #128	@ 0x80
 8001866:	d105      	bne.n	8001874 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001868:	4b38      	ldr	r3, [pc, #224]	@ (800194c <HAL_RCC_ClockConfig+0x260>)
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	4a37      	ldr	r2, [pc, #220]	@ (800194c <HAL_RCC_ClockConfig+0x260>)
 800186e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001872:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0302 	and.w	r3, r3, #2
 800187c:	2b00      	cmp	r3, #0
 800187e:	d010      	beq.n	80018a2 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689a      	ldr	r2, [r3, #8]
 8001884:	4b31      	ldr	r3, [pc, #196]	@ (800194c <HAL_RCC_ClockConfig+0x260>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800188c:	429a      	cmp	r2, r3
 800188e:	d208      	bcs.n	80018a2 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001890:	4b2e      	ldr	r3, [pc, #184]	@ (800194c <HAL_RCC_ClockConfig+0x260>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	492b      	ldr	r1, [pc, #172]	@ (800194c <HAL_RCC_ClockConfig+0x260>)
 800189e:	4313      	orrs	r3, r2
 80018a0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018a2:	4b29      	ldr	r3, [pc, #164]	@ (8001948 <HAL_RCC_ClockConfig+0x25c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 030f 	and.w	r3, r3, #15
 80018aa:	683a      	ldr	r2, [r7, #0]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d210      	bcs.n	80018d2 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018b0:	4b25      	ldr	r3, [pc, #148]	@ (8001948 <HAL_RCC_ClockConfig+0x25c>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f023 020f 	bic.w	r2, r3, #15
 80018b8:	4923      	ldr	r1, [pc, #140]	@ (8001948 <HAL_RCC_ClockConfig+0x25c>)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	4313      	orrs	r3, r2
 80018be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018c0:	4b21      	ldr	r3, [pc, #132]	@ (8001948 <HAL_RCC_ClockConfig+0x25c>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 030f 	and.w	r3, r3, #15
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d001      	beq.n	80018d2 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e036      	b.n	8001940 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0304 	and.w	r3, r3, #4
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d008      	beq.n	80018f0 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018de:	4b1b      	ldr	r3, [pc, #108]	@ (800194c <HAL_RCC_ClockConfig+0x260>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	4918      	ldr	r1, [pc, #96]	@ (800194c <HAL_RCC_ClockConfig+0x260>)
 80018ec:	4313      	orrs	r3, r2
 80018ee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0308 	and.w	r3, r3, #8
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d009      	beq.n	8001910 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018fc:	4b13      	ldr	r3, [pc, #76]	@ (800194c <HAL_RCC_ClockConfig+0x260>)
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	691b      	ldr	r3, [r3, #16]
 8001908:	00db      	lsls	r3, r3, #3
 800190a:	4910      	ldr	r1, [pc, #64]	@ (800194c <HAL_RCC_ClockConfig+0x260>)
 800190c:	4313      	orrs	r3, r2
 800190e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001910:	f000 f826 	bl	8001960 <HAL_RCC_GetSysClockFreq>
 8001914:	4602      	mov	r2, r0
 8001916:	4b0d      	ldr	r3, [pc, #52]	@ (800194c <HAL_RCC_ClockConfig+0x260>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	091b      	lsrs	r3, r3, #4
 800191c:	f003 030f 	and.w	r3, r3, #15
 8001920:	490c      	ldr	r1, [pc, #48]	@ (8001954 <HAL_RCC_ClockConfig+0x268>)
 8001922:	5ccb      	ldrb	r3, [r1, r3]
 8001924:	f003 031f 	and.w	r3, r3, #31
 8001928:	fa22 f303 	lsr.w	r3, r2, r3
 800192c:	4a0a      	ldr	r2, [pc, #40]	@ (8001958 <HAL_RCC_ClockConfig+0x26c>)
 800192e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001930:	4b0a      	ldr	r3, [pc, #40]	@ (800195c <HAL_RCC_ClockConfig+0x270>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4618      	mov	r0, r3
 8001936:	f7fe fe47 	bl	80005c8 <HAL_InitTick>
 800193a:	4603      	mov	r3, r0
 800193c:	73fb      	strb	r3, [r7, #15]

  return status;
 800193e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001940:	4618      	mov	r0, r3
 8001942:	3718      	adds	r7, #24
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40022000 	.word	0x40022000
 800194c:	40021000 	.word	0x40021000
 8001950:	04c4b400 	.word	0x04c4b400
 8001954:	080026f4 	.word	0x080026f4
 8001958:	20040004 	.word	0x20040004
 800195c:	20040008 	.word	0x20040008

08001960 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001960:	b480      	push	{r7}
 8001962:	b089      	sub	sp, #36	@ 0x24
 8001964:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001966:	2300      	movs	r3, #0
 8001968:	61fb      	str	r3, [r7, #28]
 800196a:	2300      	movs	r3, #0
 800196c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800196e:	4b3e      	ldr	r3, [pc, #248]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f003 030c 	and.w	r3, r3, #12
 8001976:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001978:	4b3b      	ldr	r3, [pc, #236]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0x108>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	f003 0303 	and.w	r3, r3, #3
 8001980:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d005      	beq.n	8001994 <HAL_RCC_GetSysClockFreq+0x34>
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	2b0c      	cmp	r3, #12
 800198c:	d121      	bne.n	80019d2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d11e      	bne.n	80019d2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001994:	4b34      	ldr	r3, [pc, #208]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0308 	and.w	r3, r3, #8
 800199c:	2b00      	cmp	r3, #0
 800199e:	d107      	bne.n	80019b0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80019a0:	4b31      	ldr	r3, [pc, #196]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0x108>)
 80019a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019a6:	0a1b      	lsrs	r3, r3, #8
 80019a8:	f003 030f 	and.w	r3, r3, #15
 80019ac:	61fb      	str	r3, [r7, #28]
 80019ae:	e005      	b.n	80019bc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80019b0:	4b2d      	ldr	r3, [pc, #180]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0x108>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	091b      	lsrs	r3, r3, #4
 80019b6:	f003 030f 	and.w	r3, r3, #15
 80019ba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80019bc:	4a2b      	ldr	r2, [pc, #172]	@ (8001a6c <HAL_RCC_GetSysClockFreq+0x10c>)
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019c4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d10d      	bne.n	80019e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019d0:	e00a      	b.n	80019e8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	2b04      	cmp	r3, #4
 80019d6:	d102      	bne.n	80019de <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80019d8:	4b25      	ldr	r3, [pc, #148]	@ (8001a70 <HAL_RCC_GetSysClockFreq+0x110>)
 80019da:	61bb      	str	r3, [r7, #24]
 80019dc:	e004      	b.n	80019e8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	2b08      	cmp	r3, #8
 80019e2:	d101      	bne.n	80019e8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80019e4:	4b23      	ldr	r3, [pc, #140]	@ (8001a74 <HAL_RCC_GetSysClockFreq+0x114>)
 80019e6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	2b0c      	cmp	r3, #12
 80019ec:	d134      	bne.n	8001a58 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80019ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0x108>)
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	f003 0303 	and.w	r3, r3, #3
 80019f6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d003      	beq.n	8001a06 <HAL_RCC_GetSysClockFreq+0xa6>
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	2b03      	cmp	r3, #3
 8001a02:	d003      	beq.n	8001a0c <HAL_RCC_GetSysClockFreq+0xac>
 8001a04:	e005      	b.n	8001a12 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001a06:	4b1a      	ldr	r3, [pc, #104]	@ (8001a70 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a08:	617b      	str	r3, [r7, #20]
      break;
 8001a0a:	e005      	b.n	8001a18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001a0c:	4b19      	ldr	r3, [pc, #100]	@ (8001a74 <HAL_RCC_GetSysClockFreq+0x114>)
 8001a0e:	617b      	str	r3, [r7, #20]
      break;
 8001a10:	e002      	b.n	8001a18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	617b      	str	r3, [r7, #20]
      break;
 8001a16:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a18:	4b13      	ldr	r3, [pc, #76]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	091b      	lsrs	r3, r3, #4
 8001a1e:	f003 030f 	and.w	r3, r3, #15
 8001a22:	3301      	adds	r3, #1
 8001a24:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001a26:	4b10      	ldr	r3, [pc, #64]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	0a1b      	lsrs	r3, r3, #8
 8001a2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001a30:	697a      	ldr	r2, [r7, #20]
 8001a32:	fb03 f202 	mul.w	r2, r3, r2
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a3c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	0e5b      	lsrs	r3, r3, #25
 8001a44:	f003 0303 	and.w	r3, r3, #3
 8001a48:	3301      	adds	r3, #1
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001a4e:	697a      	ldr	r2, [r7, #20]
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a56:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001a58:	69bb      	ldr	r3, [r7, #24]
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3724      	adds	r7, #36	@ 0x24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	08002704 	.word	0x08002704
 8001a70:	00f42400 	.word	0x00f42400
 8001a74:	007a1200 	.word	0x007a1200

08001a78 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001a80:	2300      	movs	r3, #0
 8001a82:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001a84:	4b27      	ldr	r3, [pc, #156]	@ (8001b24 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001a86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d003      	beq.n	8001a98 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001a90:	f7ff f94e 	bl	8000d30 <HAL_PWREx_GetVoltageRange>
 8001a94:	6178      	str	r0, [r7, #20]
 8001a96:	e014      	b.n	8001ac2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a98:	4b22      	ldr	r3, [pc, #136]	@ (8001b24 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001a9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a9c:	4a21      	ldr	r2, [pc, #132]	@ (8001b24 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001a9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001aa2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001aa4:	4b1f      	ldr	r3, [pc, #124]	@ (8001b24 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001aa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aa8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aac:	60fb      	str	r3, [r7, #12]
 8001aae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ab0:	f7ff f93e 	bl	8000d30 <HAL_PWREx_GetVoltageRange>
 8001ab4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001ab6:	4b1b      	ldr	r3, [pc, #108]	@ (8001b24 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001ab8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aba:	4a1a      	ldr	r2, [pc, #104]	@ (8001b24 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001abc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ac0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ac8:	d10b      	bne.n	8001ae2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2b80      	cmp	r3, #128	@ 0x80
 8001ace:	d913      	bls.n	8001af8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2ba0      	cmp	r3, #160	@ 0xa0
 8001ad4:	d902      	bls.n	8001adc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	613b      	str	r3, [r7, #16]
 8001ada:	e00d      	b.n	8001af8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001adc:	2301      	movs	r3, #1
 8001ade:	613b      	str	r3, [r7, #16]
 8001ae0:	e00a      	b.n	8001af8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2b7f      	cmp	r3, #127	@ 0x7f
 8001ae6:	d902      	bls.n	8001aee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8001ae8:	2302      	movs	r3, #2
 8001aea:	613b      	str	r3, [r7, #16]
 8001aec:	e004      	b.n	8001af8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2b70      	cmp	r3, #112	@ 0x70
 8001af2:	d101      	bne.n	8001af8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001af4:	2301      	movs	r3, #1
 8001af6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001af8:	4b0b      	ldr	r3, [pc, #44]	@ (8001b28 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f023 020f 	bic.w	r2, r3, #15
 8001b00:	4909      	ldr	r1, [pc, #36]	@ (8001b28 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001b08:	4b07      	ldr	r3, [pc, #28]	@ (8001b28 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 030f 	and.w	r3, r3, #15
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d001      	beq.n	8001b1a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e000      	b.n	8001b1c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8001b1a:	2300      	movs	r3, #0
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3718      	adds	r7, #24
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40021000 	.word	0x40021000
 8001b28:	40022000 	.word	0x40022000

08001b2c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b087      	sub	sp, #28
 8001b30:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b32:	4b2d      	ldr	r3, [pc, #180]	@ (8001be8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	f003 0303 	and.w	r3, r3, #3
 8001b3a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2b03      	cmp	r3, #3
 8001b40:	d00b      	beq.n	8001b5a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2b03      	cmp	r3, #3
 8001b46:	d825      	bhi.n	8001b94 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d008      	beq.n	8001b60 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d11f      	bne.n	8001b94 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8001b54:	4b25      	ldr	r3, [pc, #148]	@ (8001bec <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001b56:	613b      	str	r3, [r7, #16]
    break;
 8001b58:	e01f      	b.n	8001b9a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8001b5a:	4b25      	ldr	r3, [pc, #148]	@ (8001bf0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8001b5c:	613b      	str	r3, [r7, #16]
    break;
 8001b5e:	e01c      	b.n	8001b9a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b60:	4b21      	ldr	r3, [pc, #132]	@ (8001be8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0308 	and.w	r3, r3, #8
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d107      	bne.n	8001b7c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b6c:	4b1e      	ldr	r3, [pc, #120]	@ (8001be8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001b6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b72:	0a1b      	lsrs	r3, r3, #8
 8001b74:	f003 030f 	and.w	r3, r3, #15
 8001b78:	617b      	str	r3, [r7, #20]
 8001b7a:	e005      	b.n	8001b88 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b7c:	4b1a      	ldr	r3, [pc, #104]	@ (8001be8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	091b      	lsrs	r3, r3, #4
 8001b82:	f003 030f 	and.w	r3, r3, #15
 8001b86:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8001b88:	4a1a      	ldr	r2, [pc, #104]	@ (8001bf4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b90:	613b      	str	r3, [r7, #16]
    break;
 8001b92:	e002      	b.n	8001b9a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8001b94:	2300      	movs	r3, #0
 8001b96:	613b      	str	r3, [r7, #16]
    break;
 8001b98:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b9a:	4b13      	ldr	r3, [pc, #76]	@ (8001be8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	091b      	lsrs	r3, r3, #4
 8001ba0:	f003 030f 	and.w	r3, r3, #15
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ba8:	4b0f      	ldr	r3, [pc, #60]	@ (8001be8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	0a1b      	lsrs	r3, r3, #8
 8001bae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	fb03 f202 	mul.w	r2, r3, r2
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bbe:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001bc0:	4b09      	ldr	r3, [pc, #36]	@ (8001be8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	0e5b      	lsrs	r3, r3, #25
 8001bc6:	f003 0303 	and.w	r3, r3, #3
 8001bca:	3301      	adds	r3, #1
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8001bda:	683b      	ldr	r3, [r7, #0]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	371c      	adds	r7, #28
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	40021000 	.word	0x40021000
 8001bec:	00f42400 	.word	0x00f42400
 8001bf0:	007a1200 	.word	0x007a1200
 8001bf4:	08002704 	.word	0x08002704

08001bf8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d101      	bne.n	8001c0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e095      	b.n	8001d36 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d108      	bne.n	8001c24 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001c1a:	d009      	beq.n	8001c30 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	61da      	str	r2, [r3, #28]
 8001c22:	e005      	b.n	8001c30 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d106      	bne.n	8001c50 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f7fe fbc0 	bl	80003d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2202      	movs	r2, #2
 8001c54:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001c66:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001c70:	d902      	bls.n	8001c78 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001c72:	2300      	movs	r3, #0
 8001c74:	60fb      	str	r3, [r7, #12]
 8001c76:	e002      	b.n	8001c7e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001c78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c7c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8001c86:	d007      	beq.n	8001c98 <HAL_SPI_Init+0xa0>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001c90:	d002      	beq.n	8001c98 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001ca8:	431a      	orrs	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	695b      	ldr	r3, [r3, #20]
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001cc6:	431a      	orrs	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	69db      	ldr	r3, [r3, #28]
 8001ccc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001cd0:	431a      	orrs	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a1b      	ldr	r3, [r3, #32]
 8001cd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cda:	ea42 0103 	orr.w	r1, r2, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ce2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	430a      	orrs	r2, r1
 8001cec:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	0c1b      	lsrs	r3, r3, #16
 8001cf4:	f003 0204 	and.w	r2, r3, #4
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cfc:	f003 0310 	and.w	r3, r3, #16
 8001d00:	431a      	orrs	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d06:	f003 0308 	and.w	r3, r3, #8
 8001d0a:	431a      	orrs	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001d14:	ea42 0103 	orr.w	r1, r2, r3
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	430a      	orrs	r2, r1
 8001d24:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b08a      	sub	sp, #40	@ 0x28
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	60f8      	str	r0, [r7, #12]
 8001d46:	60b9      	str	r1, [r7, #8]
 8001d48:	607a      	str	r2, [r7, #4]
 8001d4a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d50:	f7fe fc8a 	bl	8000668 <HAL_GetTick>
 8001d54:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001d5c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001d64:	887b      	ldrh	r3, [r7, #2]
 8001d66:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8001d68:	887b      	ldrh	r3, [r7, #2]
 8001d6a:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001d6c:	7ffb      	ldrb	r3, [r7, #31]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d00c      	beq.n	8001d8c <HAL_SPI_TransmitReceive+0x4e>
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001d78:	d106      	bne.n	8001d88 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d102      	bne.n	8001d88 <HAL_SPI_TransmitReceive+0x4a>
 8001d82:	7ffb      	ldrb	r3, [r7, #31]
 8001d84:	2b04      	cmp	r3, #4
 8001d86:	d001      	beq.n	8001d8c <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	e1f3      	b.n	8002174 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d005      	beq.n	8001d9e <HAL_SPI_TransmitReceive+0x60>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d002      	beq.n	8001d9e <HAL_SPI_TransmitReceive+0x60>
 8001d98:	887b      	ldrh	r3, [r7, #2]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d101      	bne.n	8001da2 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e1e8      	b.n	8002174 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d101      	bne.n	8001db0 <HAL_SPI_TransmitReceive+0x72>
 8001dac:	2302      	movs	r3, #2
 8001dae:	e1e1      	b.n	8002174 <HAL_SPI_TransmitReceive+0x436>
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	2b04      	cmp	r3, #4
 8001dc2:	d003      	beq.n	8001dcc <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2205      	movs	r2, #5
 8001dc8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	887a      	ldrh	r2, [r7, #2]
 8001ddc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	887a      	ldrh	r2, [r7, #2]
 8001de4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	68ba      	ldr	r2, [r7, #8]
 8001dec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	887a      	ldrh	r2, [r7, #2]
 8001df2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	887a      	ldrh	r2, [r7, #2]
 8001df8:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2200      	movs	r2, #0
 8001e04:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001e0e:	d802      	bhi.n	8001e16 <HAL_SPI_TransmitReceive+0xd8>
 8001e10:	8abb      	ldrh	r3, [r7, #20]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d908      	bls.n	8001e28 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	685a      	ldr	r2, [r3, #4]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	e007      	b.n	8001e38 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	685a      	ldr	r2, [r3, #4]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001e36:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e42:	2b40      	cmp	r3, #64	@ 0x40
 8001e44:	d007      	beq.n	8001e56 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001e54:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001e5e:	f240 8083 	bls.w	8001f68 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d002      	beq.n	8001e70 <HAL_SPI_TransmitReceive+0x132>
 8001e6a:	8afb      	ldrh	r3, [r7, #22]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d16f      	bne.n	8001f50 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e74:	881a      	ldrh	r2, [r3, #0]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e80:	1c9a      	adds	r2, r3, #2
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	3b01      	subs	r3, #1
 8001e8e:	b29a      	uxth	r2, r3
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e94:	e05c      	b.n	8001f50 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d11b      	bne.n	8001edc <HAL_SPI_TransmitReceive+0x19e>
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d016      	beq.n	8001edc <HAL_SPI_TransmitReceive+0x19e>
 8001eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d113      	bne.n	8001edc <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001eb8:	881a      	ldrh	r2, [r3, #0]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ec4:	1c9a      	adds	r2, r3, #2
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	b29a      	uxth	r2, r3
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d11c      	bne.n	8001f24 <HAL_SPI_TransmitReceive+0x1e6>
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d016      	beq.n	8001f24 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	68da      	ldr	r2, [r3, #12]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f00:	b292      	uxth	r2, r2
 8001f02:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f08:	1c9a      	adds	r2, r3, #2
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	3b01      	subs	r3, #1
 8001f18:	b29a      	uxth	r2, r3
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001f20:	2301      	movs	r3, #1
 8001f22:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001f24:	f7fe fba0 	bl	8000668 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	6a3b      	ldr	r3, [r7, #32]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d80d      	bhi.n	8001f50 <HAL_SPI_TransmitReceive+0x212>
 8001f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f3a:	d009      	beq.n	8001f50 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e111      	b.n	8002174 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d19d      	bne.n	8001e96 <HAL_SPI_TransmitReceive+0x158>
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d197      	bne.n	8001e96 <HAL_SPI_TransmitReceive+0x158>
 8001f66:	e0e5      	b.n	8002134 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d003      	beq.n	8001f78 <HAL_SPI_TransmitReceive+0x23a>
 8001f70:	8afb      	ldrh	r3, [r7, #22]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	f040 80d1 	bne.w	800211a <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d912      	bls.n	8001fa8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f86:	881a      	ldrh	r2, [r3, #0]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f92:	1c9a      	adds	r2, r3, #2
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	3b02      	subs	r3, #2
 8001fa0:	b29a      	uxth	r2, r3
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001fa6:	e0b8      	b.n	800211a <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	330c      	adds	r3, #12
 8001fb2:	7812      	ldrb	r2, [r2, #0]
 8001fb4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fba:	1c5a      	adds	r2, r3, #1
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001fce:	e0a4      	b.n	800211a <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d134      	bne.n	8002048 <HAL_SPI_TransmitReceive+0x30a>
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d02f      	beq.n	8002048 <HAL_SPI_TransmitReceive+0x30a>
 8001fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d12c      	bne.n	8002048 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d912      	bls.n	800201e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ffc:	881a      	ldrh	r2, [r3, #0]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002008:	1c9a      	adds	r2, r3, #2
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002012:	b29b      	uxth	r3, r3
 8002014:	3b02      	subs	r3, #2
 8002016:	b29a      	uxth	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800201c:	e012      	b.n	8002044 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	330c      	adds	r3, #12
 8002028:	7812      	ldrb	r2, [r2, #0]
 800202a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002030:	1c5a      	adds	r2, r3, #1
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800203a:	b29b      	uxth	r3, r3
 800203c:	3b01      	subs	r3, #1
 800203e:	b29a      	uxth	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002044:	2300      	movs	r3, #0
 8002046:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b01      	cmp	r3, #1
 8002054:	d148      	bne.n	80020e8 <HAL_SPI_TransmitReceive+0x3aa>
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800205c:	b29b      	uxth	r3, r3
 800205e:	2b00      	cmp	r3, #0
 8002060:	d042      	beq.n	80020e8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002068:	b29b      	uxth	r3, r3
 800206a:	2b01      	cmp	r3, #1
 800206c:	d923      	bls.n	80020b6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68da      	ldr	r2, [r3, #12]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002078:	b292      	uxth	r2, r2
 800207a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002080:	1c9a      	adds	r2, r3, #2
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800208c:	b29b      	uxth	r3, r3
 800208e:	3b02      	subs	r3, #2
 8002090:	b29a      	uxth	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800209e:	b29b      	uxth	r3, r3
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d81f      	bhi.n	80020e4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	685a      	ldr	r2, [r3, #4]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80020b2:	605a      	str	r2, [r3, #4]
 80020b4:	e016      	b.n	80020e4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f103 020c 	add.w	r2, r3, #12
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c2:	7812      	ldrb	r2, [r2, #0]
 80020c4:	b2d2      	uxtb	r2, r2
 80020c6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020cc:	1c5a      	adds	r2, r3, #1
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80020d8:	b29b      	uxth	r3, r3
 80020da:	3b01      	subs	r3, #1
 80020dc:	b29a      	uxth	r2, r3
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80020e4:	2301      	movs	r3, #1
 80020e6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80020e8:	f7fe fabe 	bl	8000668 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	6a3b      	ldr	r3, [r7, #32]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d803      	bhi.n	8002100 <HAL_SPI_TransmitReceive+0x3c2>
 80020f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020fe:	d102      	bne.n	8002106 <HAL_SPI_TransmitReceive+0x3c8>
 8002100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002102:	2b00      	cmp	r3, #0
 8002104:	d109      	bne.n	800211a <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2201      	movs	r2, #1
 800210a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e02c      	b.n	8002174 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800211e:	b29b      	uxth	r3, r3
 8002120:	2b00      	cmp	r3, #0
 8002122:	f47f af55 	bne.w	8001fd0 <HAL_SPI_TransmitReceive+0x292>
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800212c:	b29b      	uxth	r3, r3
 800212e:	2b00      	cmp	r3, #0
 8002130:	f47f af4e 	bne.w	8001fd0 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002134:	6a3a      	ldr	r2, [r7, #32]
 8002136:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002138:	68f8      	ldr	r0, [r7, #12]
 800213a:	f000 fa5d 	bl	80025f8 <SPI_EndRxTxTransaction>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d008      	beq.n	8002156 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2220      	movs	r2, #32
 8002148:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e00e      	b.n	8002174 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2201      	movs	r2, #1
 800215a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e000      	b.n	8002174 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8002172:	2300      	movs	r3, #0
  }
}
 8002174:	4618      	mov	r0, r3
 8002176:	3728      	adds	r7, #40	@ 0x28
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b088      	sub	sp, #32
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	099b      	lsrs	r3, r3, #6
 8002198:	f003 0301 	and.w	r3, r3, #1
 800219c:	2b00      	cmp	r3, #0
 800219e:	d10f      	bne.n	80021c0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d00a      	beq.n	80021c0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	099b      	lsrs	r3, r3, #6
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d004      	beq.n	80021c0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	4798      	blx	r3
    return;
 80021be:	e0d7      	b.n	8002370 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	085b      	lsrs	r3, r3, #1
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d00a      	beq.n	80021e2 <HAL_SPI_IRQHandler+0x66>
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	09db      	lsrs	r3, r3, #7
 80021d0:	f003 0301 	and.w	r3, r3, #1
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d004      	beq.n	80021e2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	4798      	blx	r3
    return;
 80021e0:	e0c6      	b.n	8002370 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	095b      	lsrs	r3, r3, #5
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d10c      	bne.n	8002208 <HAL_SPI_IRQHandler+0x8c>
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	099b      	lsrs	r3, r3, #6
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d106      	bne.n	8002208 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	0a1b      	lsrs	r3, r3, #8
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	2b00      	cmp	r3, #0
 8002204:	f000 80b4 	beq.w	8002370 <HAL_SPI_IRQHandler+0x1f4>
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	095b      	lsrs	r3, r3, #5
 800220c:	f003 0301 	and.w	r3, r3, #1
 8002210:	2b00      	cmp	r3, #0
 8002212:	f000 80ad 	beq.w	8002370 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	099b      	lsrs	r3, r3, #6
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	2b00      	cmp	r3, #0
 8002220:	d023      	beq.n	800226a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b03      	cmp	r3, #3
 800222c:	d011      	beq.n	8002252 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002232:	f043 0204 	orr.w	r2, r3, #4
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800223a:	2300      	movs	r3, #0
 800223c:	617b      	str	r3, [r7, #20]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	617b      	str	r3, [r7, #20]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	617b      	str	r3, [r7, #20]
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	e00b      	b.n	800226a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002252:	2300      	movs	r3, #0
 8002254:	613b      	str	r3, [r7, #16]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	613b      	str	r3, [r7, #16]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	613b      	str	r3, [r7, #16]
 8002266:	693b      	ldr	r3, [r7, #16]
        return;
 8002268:	e082      	b.n	8002370 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	095b      	lsrs	r3, r3, #5
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	2b00      	cmp	r3, #0
 8002274:	d014      	beq.n	80022a0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800227a:	f043 0201 	orr.w	r2, r3, #1
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002282:	2300      	movs	r3, #0
 8002284:	60fb      	str	r3, [r7, #12]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	60fb      	str	r3, [r7, #12]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	0a1b      	lsrs	r3, r3, #8
 80022a4:	f003 0301 	and.w	r3, r3, #1
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d00c      	beq.n	80022c6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022b0:	f043 0208 	orr.w	r2, r3, #8
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80022b8:	2300      	movs	r3, #0
 80022ba:	60bb      	str	r3, [r7, #8]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	60bb      	str	r3, [r7, #8]
 80022c4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d04f      	beq.n	800236e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	685a      	ldr	r2, [r3, #4]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80022dc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2201      	movs	r2, #1
 80022e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	f003 0302 	and.w	r3, r3, #2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d104      	bne.n	80022fa <HAL_SPI_IRQHandler+0x17e>
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d034      	beq.n	8002364 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	685a      	ldr	r2, [r3, #4]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f022 0203 	bic.w	r2, r2, #3
 8002308:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800230e:	2b00      	cmp	r3, #0
 8002310:	d011      	beq.n	8002336 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002316:	4a18      	ldr	r2, [pc, #96]	@ (8002378 <HAL_SPI_IRQHandler+0x1fc>)
 8002318:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800231e:	4618      	mov	r0, r3
 8002320:	f7fe fae3 	bl	80008ea <HAL_DMA_Abort_IT>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d005      	beq.n	8002336 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800232e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800233a:	2b00      	cmp	r3, #0
 800233c:	d016      	beq.n	800236c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002342:	4a0d      	ldr	r2, [pc, #52]	@ (8002378 <HAL_SPI_IRQHandler+0x1fc>)
 8002344:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800234a:	4618      	mov	r0, r3
 800234c:	f7fe facd 	bl	80008ea <HAL_DMA_Abort_IT>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d00a      	beq.n	800236c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800235a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8002362:	e003      	b.n	800236c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f000 f809 	bl	800237c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800236a:	e000      	b.n	800236e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800236c:	bf00      	nop
    return;
 800236e:	bf00      	nop
  }
}
 8002370:	3720      	adds	r7, #32
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	08002391 	.word	0x08002391

0800237c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002384:	bf00      	nop
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800239c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2200      	movs	r2, #0
 80023aa:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80023ac:	68f8      	ldr	r0, [r7, #12]
 80023ae:	f7ff ffe5 	bl	800237c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80023b2:	bf00      	nop
 80023b4:	3710      	adds	r7, #16
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
	...

080023bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b088      	sub	sp, #32
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	603b      	str	r3, [r7, #0]
 80023c8:	4613      	mov	r3, r2
 80023ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80023cc:	f7fe f94c 	bl	8000668 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023d4:	1a9b      	subs	r3, r3, r2
 80023d6:	683a      	ldr	r2, [r7, #0]
 80023d8:	4413      	add	r3, r2
 80023da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80023dc:	f7fe f944 	bl	8000668 <HAL_GetTick>
 80023e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80023e2:	4b39      	ldr	r3, [pc, #228]	@ (80024c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	015b      	lsls	r3, r3, #5
 80023e8:	0d1b      	lsrs	r3, r3, #20
 80023ea:	69fa      	ldr	r2, [r7, #28]
 80023ec:	fb02 f303 	mul.w	r3, r2, r3
 80023f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80023f2:	e054      	b.n	800249e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023fa:	d050      	beq.n	800249e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80023fc:	f7fe f934 	bl	8000668 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	69fa      	ldr	r2, [r7, #28]
 8002408:	429a      	cmp	r2, r3
 800240a:	d902      	bls.n	8002412 <SPI_WaitFlagStateUntilTimeout+0x56>
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d13d      	bne.n	800248e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	685a      	ldr	r2, [r3, #4]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002420:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800242a:	d111      	bne.n	8002450 <SPI_WaitFlagStateUntilTimeout+0x94>
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002434:	d004      	beq.n	8002440 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800243e:	d107      	bne.n	8002450 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800244e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002454:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002458:	d10f      	bne.n	800247a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002468:	601a      	str	r2, [r3, #0]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002478:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2201      	movs	r2, #1
 800247e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e017      	b.n	80024be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d101      	bne.n	8002498 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002494:	2300      	movs	r3, #0
 8002496:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	3b01      	subs	r3, #1
 800249c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	689a      	ldr	r2, [r3, #8]
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	4013      	ands	r3, r2
 80024a8:	68ba      	ldr	r2, [r7, #8]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	bf0c      	ite	eq
 80024ae:	2301      	moveq	r3, #1
 80024b0:	2300      	movne	r3, #0
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	461a      	mov	r2, r3
 80024b6:	79fb      	ldrb	r3, [r7, #7]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d19b      	bne.n	80023f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3720      	adds	r7, #32
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	20040004 	.word	0x20040004

080024cc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b08a      	sub	sp, #40	@ 0x28
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
 80024d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80024da:	2300      	movs	r3, #0
 80024dc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80024de:	f7fe f8c3 	bl	8000668 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024e6:	1a9b      	subs	r3, r3, r2
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	4413      	add	r3, r2
 80024ec:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80024ee:	f7fe f8bb 	bl	8000668 <HAL_GetTick>
 80024f2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	330c      	adds	r3, #12
 80024fa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80024fc:	4b3d      	ldr	r3, [pc, #244]	@ (80025f4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	4613      	mov	r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	4413      	add	r3, r2
 8002506:	00da      	lsls	r2, r3, #3
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	0d1b      	lsrs	r3, r3, #20
 800250c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800250e:	fb02 f303 	mul.w	r3, r2, r3
 8002512:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002514:	e060      	b.n	80025d8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800251c:	d107      	bne.n	800252e <SPI_WaitFifoStateUntilTimeout+0x62>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d104      	bne.n	800252e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	b2db      	uxtb	r3, r3
 800252a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800252c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002534:	d050      	beq.n	80025d8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002536:	f7fe f897 	bl	8000668 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	6a3b      	ldr	r3, [r7, #32]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002542:	429a      	cmp	r2, r3
 8002544:	d902      	bls.n	800254c <SPI_WaitFifoStateUntilTimeout+0x80>
 8002546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002548:	2b00      	cmp	r3, #0
 800254a:	d13d      	bne.n	80025c8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	685a      	ldr	r2, [r3, #4]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800255a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002564:	d111      	bne.n	800258a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800256e:	d004      	beq.n	800257a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002578:	d107      	bne.n	800258a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002588:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800258e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002592:	d10f      	bne.n	80025b4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80025b2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e010      	b.n	80025ea <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80025ce:	2300      	movs	r3, #0
 80025d0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	3b01      	subs	r3, #1
 80025d6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	689a      	ldr	r2, [r3, #8]
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	4013      	ands	r3, r2
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d196      	bne.n	8002516 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3728      	adds	r7, #40	@ 0x28
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	20040004 	.word	0x20040004

080025f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af02      	add	r7, sp, #8
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	9300      	str	r3, [sp, #0]
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	2200      	movs	r2, #0
 800260c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8002610:	68f8      	ldr	r0, [r7, #12]
 8002612:	f7ff ff5b 	bl	80024cc <SPI_WaitFifoStateUntilTimeout>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d007      	beq.n	800262c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002620:	f043 0220 	orr.w	r2, r3, #32
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e027      	b.n	800267c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	9300      	str	r3, [sp, #0]
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	2200      	movs	r2, #0
 8002634:	2180      	movs	r1, #128	@ 0x80
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f7ff fec0 	bl	80023bc <SPI_WaitFlagStateUntilTimeout>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d007      	beq.n	8002652 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002646:	f043 0220 	orr.w	r2, r3, #32
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e014      	b.n	800267c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	9300      	str	r3, [sp, #0]
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	2200      	movs	r2, #0
 800265a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800265e:	68f8      	ldr	r0, [r7, #12]
 8002660:	f7ff ff34 	bl	80024cc <SPI_WaitFifoStateUntilTimeout>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d007      	beq.n	800267a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800266e:	f043 0220 	orr.w	r2, r3, #32
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e000      	b.n	800267c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3710      	adds	r7, #16
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <memset>:
 8002684:	4402      	add	r2, r0
 8002686:	4603      	mov	r3, r0
 8002688:	4293      	cmp	r3, r2
 800268a:	d100      	bne.n	800268e <memset+0xa>
 800268c:	4770      	bx	lr
 800268e:	f803 1b01 	strb.w	r1, [r3], #1
 8002692:	e7f9      	b.n	8002688 <memset+0x4>

08002694 <__libc_init_array>:
 8002694:	b570      	push	{r4, r5, r6, lr}
 8002696:	4d0d      	ldr	r5, [pc, #52]	@ (80026cc <__libc_init_array+0x38>)
 8002698:	4c0d      	ldr	r4, [pc, #52]	@ (80026d0 <__libc_init_array+0x3c>)
 800269a:	1b64      	subs	r4, r4, r5
 800269c:	10a4      	asrs	r4, r4, #2
 800269e:	2600      	movs	r6, #0
 80026a0:	42a6      	cmp	r6, r4
 80026a2:	d109      	bne.n	80026b8 <__libc_init_array+0x24>
 80026a4:	4d0b      	ldr	r5, [pc, #44]	@ (80026d4 <__libc_init_array+0x40>)
 80026a6:	4c0c      	ldr	r4, [pc, #48]	@ (80026d8 <__libc_init_array+0x44>)
 80026a8:	f000 f818 	bl	80026dc <_init>
 80026ac:	1b64      	subs	r4, r4, r5
 80026ae:	10a4      	asrs	r4, r4, #2
 80026b0:	2600      	movs	r6, #0
 80026b2:	42a6      	cmp	r6, r4
 80026b4:	d105      	bne.n	80026c2 <__libc_init_array+0x2e>
 80026b6:	bd70      	pop	{r4, r5, r6, pc}
 80026b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80026bc:	4798      	blx	r3
 80026be:	3601      	adds	r6, #1
 80026c0:	e7ee      	b.n	80026a0 <__libc_init_array+0xc>
 80026c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80026c6:	4798      	blx	r3
 80026c8:	3601      	adds	r6, #1
 80026ca:	e7f2      	b.n	80026b2 <__libc_init_array+0x1e>
 80026cc:	08002734 	.word	0x08002734
 80026d0:	08002734 	.word	0x08002734
 80026d4:	08002734 	.word	0x08002734
 80026d8:	08002738 	.word	0x08002738

080026dc <_init>:
 80026dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026de:	bf00      	nop
 80026e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026e2:	bc08      	pop	{r3}
 80026e4:	469e      	mov	lr, r3
 80026e6:	4770      	bx	lr

080026e8 <_fini>:
 80026e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ea:	bf00      	nop
 80026ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026ee:	bc08      	pop	{r3}
 80026f0:	469e      	mov	lr, r3
 80026f2:	4770      	bx	lr
